<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 入门教程(摘)</title>
    <url>/2018/07/29/Docker%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B(%E6%91%98)/</url>
    <content><![CDATA[<p>2013年发布至今， Docker 一直广受瞩目，被认为可能会改变软件行业。</p>
<p>但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p>
<span id="more"></span>

<p>一、环境配置的难题</p>
<p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p>
<p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p>
<p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p>
<p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p>
<p>二、虚拟机</p>
<p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p>
<p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p>
<p>（1）资源占用多</p>
<p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p>
<p>（2）冗余步骤多</p>
<p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p>
<p>（3）启动慢</p>
<p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p>
<p>三、Linux 容器</p>
<p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p>
<p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>
<p>由于容器是进程级别的，相比虚拟机有很多优势。</p>
<p>（1）启动快</p>
<p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p>
<p>（2）资源占用少</p>
<p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p>
<p>（3）体积小</p>
<p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p>
<p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p>
<p>四、Docker 是什么？</p>
<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<p>五、Docker 的用途</p>
<p>Docker 的主要用途，目前有三大类。</p>
<p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p>
<p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p>
<p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>
<p>六、Docker 的安装</p>
<p>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p>
<p>Docker CE 的安装请参考官方文档。</p>
<ul>
<li><p>Mac : 推荐使用Homebrew 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows</p>
</li>
<li><p>Ubuntu</p>
</li>
<li><p>Debian</p>
</li>
<li><p>CentOS</p>
</li>
<li><p>Fedora</p>
</li>
<li><p>其他 Linux 发行版</p>
</li>
</ul>
<p>安装完成后，运行下面的命令，验证是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">$ docker info</span><br></pre></td></tr></table></figure>

<p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker USER</span><br></pre></td></tr></table></figure>

<p>Docker 是服务器—-客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（官方文档）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>六、image 文件</p>
<p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p>
<p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">$ docker image <span class="built_in">rm</span> [imageName]</span><br></pre></td></tr></table></figure>

<p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p>
<p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p>
<p>七、实例：hello world</p>
<p>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p>
<p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image pull library/hello-world</span><br></pre></td></tr></table></figure>

<p>上面代码中，docker image pull是抓取 image 文件的命令。library&#x2F;hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</p>
<p>由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image pull hello-world</span><br></pre></td></tr></table></figure>

<p>抓取成功以后，就可以在本机看到这个 image 文件了。	</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>现在，运行这个 image 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run hello-world</span><br></pre></td></tr></table></figure>

<p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。</p>
<p>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p>
<p>如果运行成功，你会在屏幕上读到下面的输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run hello-world</span><br><span class="line"></span><br><span class="line">// result</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>输出这段提示以后，hello world就会停止运行，容器自动终止。</p>
<p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run -it ubuntu bash</span><br></pre></td></tr></table></figure>

<p>对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">kill</span> [containID]</span><br></pre></td></tr></table></figure>

<p>八、容器文件</p>
<p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">ls</span></span><br><span class="line">$ docker container <span class="built_in">ls</span> --all</span><br></pre></td></tr></table></figure>

<p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p>
<p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">rm</span> [containerID]</span><br></pre></td></tr></table></figure>

<p>运行上面的命令之后，再使用docker container ls –all命令，就会发现被删除的容器文件已经消失了。</p>
<p>九、Dockerfile 文件</p>
<p>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p>
<p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p>
<p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p>
<p>十、实例：制作自己的 Docker 容器</p>
<p>下面我以 koa-demos 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p>
<p>作为准备工作，请先下载源码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ruanyf/koa-demos.git</span><br><span class="line">$ <span class="built_in">cd</span> koa-demos</span><br></pre></td></tr></table></figure>

<p>10.1 编写 Dockerfile 文件</p>
<p>首先，在项目的根目录下，新建一个文本文件.dockerignore，写入下面的内容。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure>

<p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p>
<p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure>

<p>上面代码一共五行，含义如下。</p>
<ul>
<li>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</li>
<li>COPY . &#x2F;app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的&#x2F;app目录。</li>
<li>WORKDIR &#x2F;app：指定接下来的工作路径为&#x2F;app。</li>
<li>RUN npm install：在&#x2F;app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</li>
<li>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</li>
</ul>
<p>10.2 创建 image 文件</p>
<p>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image build -t koa-demo .</span><br><span class="line">$ docker image build -t koa-demo:0.0.1 .</span><br></pre></td></tr></table></figure>

<p>上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p>
<p>如果运行成功，就可以看到新生成的 image 文件koa-demo了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>10.3 生成容器</p>
<p>docker container run命令会从 image 文件生成容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run -p 8000:3000 -it koa-demo /bin/bash</span><br><span class="line">$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span><br></pre></td></tr></table></figure>

<p>上面命令的各个参数含义如下：</p>
<ul>
<li>-p参数：容器的 3000 端口映射到本机的 8000 端口。</li>
<li>-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</li>
<li>koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</li>
<li>&#x2F;bin&#x2F;bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</li>
</ul>
<p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p>
<p>root@66d80f4aaf1e:&#x2F;app</p>
<p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p>
<p>root@66d80f4aaf1e:&#x2F;app</p>
<p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000，网页显示&quot;Not">http://127.0.0.1:8000，网页显示&quot;Not</a> Found”，这是因为这个 demo 没有写路由。</p>
<p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p>
<p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用docker container kill终止容器运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">ls</span></span><br><span class="line">$ docker container <span class="built_in">kill</span> [containerID]</span><br></pre></td></tr></table></figure>

<p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">ls</span> --all</span><br><span class="line">$ docker container <span class="built_in">rm</span> [containerID]</span><br></pre></td></tr></table></figure>

<p>也可以使用docker container run命令的–rm参数，在容器终止运行后自动删除容器文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run --<span class="built_in">rm</span> -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure>

<p>10.4 CMD 命令</p>
<p>上一节的例子里面，容器启动以后，需要手动输入命令node demos&#x2F;01.js。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p>
<p>FROM node:8.4<br>COPY . &#x2F;app<br>WORKDIR &#x2F;app<br>RUN npm install –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>EXPOSE 3000<br>CMD node demos&#x2F;01.js</p>
<p>上面的 Dockerfile 里面，多了最后一行CMD node demos&#x2F;01.js，它表示容器启动后自动执行node demos&#x2F;01.js。</p>
<p>你可能会问，RUN命令与CMD命令的区别在哪里？简单说，RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令。</p>
<p>注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的&#x2F;bin&#x2F;bash），否则它会覆盖CMD命令。现在，启动容器可以使用下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container run --<span class="built_in">rm</span> -p 8000:3000 -it koa-demo:0.0.1</span><br></pre></td></tr></table></figure>

<p>10.5 发布 image 文件</p>
<p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p>
<p>首先，去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure>

<p>接着，为本地的 image 标注用户名和版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image tag imageName/[repository]:[tag]</span><br><span class="line">$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</span><br></pre></td></tr></table></figure>

<p>也可以不标注用户名，重新构建一下 image 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image build -t [username]/[repository]:[tag] .</span><br></pre></td></tr></table></figure>

<p>最后，发布 image 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image push [username]/[repository]:[tag]</span><br></pre></td></tr></table></figure>

<p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p>
<p>十一、其他有用的命令</p>
<p>docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。</p>
<p>（1）docker container start</p>
<p>前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container start [containerID]</span><br></pre></td></tr></table></figure>

<p>（2）docker container stop</p>
<p>前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash container stop [containerID]</span><br></pre></td></tr></table></figure>

<p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p>
<p>（3）docker container logs</p>
<p>docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container logs [containerID]</span><br></pre></td></tr></table></figure>

<p>（4）docker container exec</p>
<p>docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">exec</span> -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure>

<p>（5）docker container cp</p>
<p>docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container <span class="built_in">cp</span> [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure>

<p>（完）</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew + iTerm2 + fish</title>
    <url>/2018/03/16/Homebrew%20+%20iTerm2%20+%20fish/</url>
    <content><![CDATA[<p>Homebrew是macOS下的软件包管理器。</p>
<span id="more"></span>

<p>Homebrew安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>Cakebrew安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install cakebrew</span><br></pre></td></tr></table></figure>

<p>Cask常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看帮助</span><br><span class="line">$ brew cask -<span class="built_in">help</span></span><br><span class="line">// 安装软件</span><br><span class="line">$ brew cask install &lt;software name&gt;</span><br><span class="line">// 卸载软件</span><br><span class="line">$ brew cask uninstall &lt;software name&gt;</span><br><span class="line">// 搜索软件</span><br><span class="line">$ brew cask search &lt;software name&gt;</span><br><span class="line">// 查看软件相关信息</span><br><span class="line">$ brew cask info &lt;software name&gt;</span><br><span class="line">// 列出通过 Homebrew-Cask 安装的包</span><br><span class="line">$ brew cask list</span><br></pre></td></tr></table></figure>
<p>Brew装机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 Homebrew</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"></span><br><span class="line"># Homebrew-Cask</span><br><span class="line">brew tap caskroom/cask</span><br><span class="line"></span><br><span class="line"># 安装Cask基础软件</span><br><span class="line">brew cask install iterm2         #安装iTerm 2</span><br><span class="line">brew cask install visual-studio-code#微软出品的文本编辑器，可替代 Sublime Text</span><br><span class="line">brew cask install google-chrome  #安装Chrome</span><br><span class="line">brew cask install the-unarchiver #解压软件</span><br><span class="line">brew cask install alfred         #效率软件</span><br><span class="line">brew cask install qq             #腾讯QQ</span><br><span class="line">brew cask install sourcetree     #Git GUI 客户端</span><br><span class="line">brew cask install cheatsheet     # 显示当前程序的快捷键列表，默认的快捷键是长按⌘</span><br></pre></td></tr></table></figure>

<p>Brew备份</p>
<p>换电脑时:备份安装安装了哪些命令行，安装的时候用了什么选项。<br>homebrew为我们提供了非常方便的子命令：bundle</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew bundle dump</span><br></pre></td></tr></table></figure>
<p>首次执行上面这条命令，将会自动tap homebrew&#x2F;bundle，然后将以往安装的命令以及安装的命令行选项保存在当前的路径下的Brewfile。用编辑器打开来看其实就是一个脚本包含了所有已经安装的命令行以及相应的选项。你要备份的文件就是这个Brewfile</p>
<p>在全新的macOS上想要恢复的话，就使用该Brewfile.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew bundle</span><br></pre></td></tr></table></figure>
<p>该命令会在当前文件夹下寻找Brewfile文件然后开始执行。</p>
<p>更多关于bundle自命令的帮助请执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew <span class="built_in">help</span> bundle</span><br></pre></td></tr></table></figure>

<hr>
<p>Fish shell 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install fish</span><br></pre></td></tr></table></figure>

<p>Fish shell 配置</p>
<p>编辑&#x2F;etc&#x2F;shells文件，在文件底部添加下面一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/fish</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果使用vim ，需要管理员的权限编辑，如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/shells</span><br></pre></td></tr></table></figure>

<p>shell 从 bash 切换到 fish </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chsh -s /usr/local/bin/fish</span><br></pre></td></tr></table></figure>

<p>shell 从 fish 切换到 bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chsl -s /bin/bash</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>package manager</category>
      </categories>
      <tags>
        <tag>brew</tag>
        <tag>iTerm2</tag>
        <tag>fish</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 实战</title>
    <url>/2015/03/16/Hexo-%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<ol>
<li>Mac 搭建环境之安装node&amp;npm</li>
</ol>
<blockquote>
<p>推荐安装安装nvm来管理Node版本</p>
</blockquote>
<span id="more"></span>

<ul>
<li>安装nvm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<ul>
<li>安装node和npm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Hexo-ci</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>将镜像设置为淘宝镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br><span class="line">$ npm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Hexo 写文章的常用命令</li>
</ol>
<ul>
<li>新建文章</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建一个文章, 标题为title</p>
</blockquote>
<ul>
<li>本地预览</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<ul>
<li>文章部署</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li>清除缓存</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<ul>
<li>生成静态文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成网站静态文件到默认设置的 <code>public</code> 文件夹。</p>
</blockquote>
<ul>
<li>生成About Me</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page aboutme</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建一个标题为 <code>aboutme</code> 的页面，默认链接地址为 <code>主页地址/aboutme/</code></p>
</blockquote>
<ul>
<li>新建草稿箱</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;draft_title&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>source目录下回有一个_drafts文件目录, 这里有左右的草稿文件draft_title</p>
</blockquote>
<ul>
<li>写好了草稿, 在不发布的情况下预览</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure>

<ul>
<li>发布草稿</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish <span class="string">&quot;draft_title&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>_drafts目录里的b.md不见了, 跑到了_posts里面, 草稿发布成功了</p>
</blockquote>
<ol start="3">
<li>Hexo 多终端同步方案</li>
</ol>
<blockquote>
<p>需求场景: 需要在公司或者家庭多个电脑完成Hexo的博客撰写和发布工作。这就涉及到Hexo多电脑的同步问题。</p>
</blockquote>
<ul>
<li>Hexo 私有仓库创建</li>
</ul>
<p>创建一个私有git仓库,平台任选, github&amp;coding等都可以</p>
<ul>
<li>建立本地git仓库</li>
</ul>
<p>进入你现有的Hexo文件夹，删除第三方主题的git配置，如对<code>next</code>主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf ./themes/next/.git</span><br></pre></td></tr></table></figure>

<p>建立本地的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>编辑.gitignore文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</span><br></pre></td></tr></table></figure>

<ul>
<li>本地仓库关联到私有仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://git.coding.net/&lt;yourname&gt;/Hexo-my.git</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;my first private hexo&quot;</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>至此，就完成了本地Hexo源码的全备份</p>
<blockquote>
<p>请自觉传送到你的另外一台终端上进行写作, 必要条件: node&#x2F;npm&#x2F;hexo&#x2F;git 工具的安装</p>
<p>这里假装你都已经安装好了</p>
</blockquote>
<ul>
<li>Hexo 拉取</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://git.coding.net/iforvert/Hexo-iforvert.git</span><br></pre></td></tr></table></figure>

<p>这样你就拥有了你的所有Hexo源文件</p>
<ul>
<li>Hexo部署</li>
</ul>
<p>特别提醒: </p>
<blockquote>
<p>尽管拉取下来了，还需要建立一下Hexo的环境，这里需要格外注意的一点是：<br>千万不要用<code>hexo init</code>命令。原因是当前目录已经建立了git仓库环境, <code>hexo init</code>会覆盖到当前的git环境，重建一个新的，这样和我们的私有Hexo源码仓库脱离了联系。</p>
</blockquote>
<p>正确的做法是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>因为<code>package.json</code>里面已经保存了<code>hexo</code>的必备资源包信息，<code>npm install</code>后Hexo环境就建立起来了。</p>
<ul>
<li>Hexo 编写和发布</li>
</ul>
<p>自行穿越到文章顶部, 完成文章的创建, 生成, 预览, 发布等过程, 这里不做赘述.</p>
<ul>
<li>同步到私有库</li>
</ul>
<p>流程如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;log&quot;</span></span><br><span class="line">$ git push xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>Hexo 仓库更新</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch --all</span><br></pre></td></tr></table></figure>

<p>将git上所有的文件拉取到本地并覆盖本地(以远端为准)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<p>reset 对所拉取的文件不做任何处理，此处不用 pull 是因为本地尚有许多文件，使用 pull 会有一些版本冲突，解决起来也麻烦，而本地的文件都是初始化生成的文件，较拉取的库里面的文件而言基本无用，所以直接丢弃。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Masonry的日常使用</title>
    <url>/2018/07/29/Masonry%E7%9A%84%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>一. 使用baseline</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义view中:</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Override</span></span><br><span class="line"><span class="comment">// 返回自定义的baseline的view</span></span><br><span class="line">- (<span class="built_in">UIView</span> *)viewForBaselineLayout </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _baseView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// item1&amp;item2&amp;item3 : 是上面自定义View的对象</span></span><br><span class="line">[item1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.left.mas_equalTo(<span class="keyword">self</span>.view.mas_left).with.offset(<span class="number">8</span>);</span><br><span class="line">    make.top.mas_equalTo(<span class="keyword">self</span>.view.mas_top).with.offset(<span class="number">200</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跟第一个item的baseline对齐</span></span><br><span class="line">[item2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.left.mas_equalTo(item1.mas_right).with.offset(<span class="number">10</span>);</span><br><span class="line">    make.baseline.mas_equalTo(item1.mas_baseline);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跟第一个item的baseline对齐</span></span><br><span class="line">[item3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.left.mas_equalTo(item2.mas_right).with.offset(<span class="number">10</span>);</span><br><span class="line">    make.baseline.mas_equalTo(item1.mas_baseline);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>二. 在屏幕边缘控件布局技巧</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注释掉这个宏定义，就直接使用length值做约束，否则的话，使用新的mas_topLayoutGuide和mas_bottomLayoutGuide</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEW_FEATURE</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)updateViewConstraints </span><br><span class="line">&#123;</span><br><span class="line">	#ifndef NEW_FEATURE</span><br><span class="line">    // 根据新的length值更新约束</span><br><span class="line">    [_topView mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</span><br><span class="line">        make.top.equalTo(self.view.mas_top).with.offset(self.topLayoutGuide.length);</span><br><span class="line">        NSLog(@&quot;[updateViewConstraints] top: %g&quot;, self.topLayoutGuide.length);</span><br><span class="line">    &#125;];</span><br><span class="line">    // 根据新的length值更新约束</span><br><span class="line">    [_bottomView mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</span><br><span class="line">        make.bottom.equalTo(self.view.mas_bottom).with.offset(-(self.bottomLayoutGuide.length));</span><br><span class="line">        NSLog(@&quot;[updateViewConstraints] bottom: %g&quot;, self.bottomLayoutGuide.length);</span><br><span class="line">    &#125;];</span><br><span class="line">	#endif</span><br><span class="line">    [super updateViewConstraints];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式一. 直接使用UIViewController的topLayoutGuide.length</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[_topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);  </span><br><span class="line">&#125;];</span><br><span class="line">[_bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>方式二. 使用mas_topLayoutGuide和mas_bottomLayoutGuide </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[_topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@<span class="number">40</span>);</span><br><span class="line">    make.left.and.right.equalTo(<span class="keyword">self</span>.view);</span><br><span class="line">    make.top.equalTo(<span class="keyword">self</span>.mas_topLayoutGuide);</span><br><span class="line">&#125;];</span><br><span class="line">[_bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@<span class="number">40</span>);</span><br><span class="line">    make.left.and.right.equalTo(<span class="keyword">self</span>.view);</span><br><span class="line">    make.bottom.equalTo(<span class="keyword">self</span>.mas_bottomLayoutGuide);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>三. UITabview cell height 计算方式</p>
<p>方式一. iOS 8 的Self-sizing特性 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">_tableView.estimatedRowHeight = <span class="number">80.0</span>f;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二. 调用systemLayoutSizeFittingSize:获取高度.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath </span><br><span class="line">&#123;</span><br><span class="line">    if (!_templateCell) </span><br><span class="line">    &#123;</span><br><span class="line">        _templateCell = [tableView dequeueReusableCellWithIdentifier:NSStringFromClass([Case4Cell class])];</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取对应的数据</span><br><span class="line">    Case4DataEntity *dataEntity = _data[(NSUInteger) indexPath.row];</span><br><span class="line">    // 判断高度是否已经计算过</span><br><span class="line">    if (dataEntity.cellHeight &lt;= 0) </span><br><span class="line">    &#123;</span><br><span class="line">        // 填充数据</span><br><span class="line">        [_templateCell setupData:dataEntity];</span><br><span class="line">        // 根据当前数据，计算Cell的高度，注意+1</span><br><span class="line">        dataEntity.cellHeight = [_templateCell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height + 0.5f;</span><br><span class="line">        NSLog(@&quot;Calculate: %ld, height: %g&quot;, (long) indexPath.row, dataEntity.cellHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">        NSLog(@&quot;Get cache: %ld, height: %g&quot;, (long) indexPath.row, dataEntity.cellHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    return dataEntity.cellHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 计算UILabel的preferredMaxLayoutWidth值，多行时必须设置这个值，否则系统无法决定Label的宽度 </p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> preferredMaxWidth = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">44</span> - <span class="number">4</span> * <span class="number">3</span>;</span><br><span class="line">_contentLabel.preferredMaxLayoutWidth = preferredMaxWidth; </span><br><span class="line"><span class="comment">// 这行是为了让Label中的内容全部展示</span></span><br><span class="line">[_contentLabel setContentHuggingPriority:<span class="built_in">UILayoutPriorityRequired</span> forAxis:<span class="built_in">UILayoutConstraintAxisVertical</span>];</span><br></pre></td></tr></table></figure>

<p>四. 确定当前ViewController显示的范围</p>
<p>方式1. 直接使用length值做约束 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[_topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[_bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// handler called updateViewConstraints</span><br><span class="line"></span><br><span class="line">- (void)updateViewConstraints</span><br><span class="line">&#123;</span><br><span class="line">    // 根据新的length值更新约束</span><br><span class="line">    [_topView mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</span><br><span class="line">        make.top.equalTo(self.view.mas_top).with.offset(self.topLayoutGuide.length);</span><br><span class="line">        NSLog(@&quot;[updateViewConstraints] top: %g&quot;, self.topLayoutGuide.length);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    // 根据新的length值更新约束</span><br><span class="line">    [_bottomView mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</span><br><span class="line">        make.bottom.equalTo(self.view.mas_bottom).with.offset(-(self.bottomLayoutGuide.length));</span><br><span class="line">        NSLog(@&quot;[updateViewConstraints] bottom: %g&quot;, self.bottomLayoutGuide.length);</span><br><span class="line">    &#125;];</span><br><span class="line">    [super updateViewConstraints];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式2. 使用新的mas_topLayoutGuide和mas_bottomLayoutGuide </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[_topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">    make.top.equalTo(self.mas_topLayoutGuide);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[_bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">    make.bottom.equalTo(self.mas_bottomLayoutGuide);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// Event called  updateViewConstraints (可选)</span><br><span class="line"></span><br><span class="line">- (void)updateViewConstraints</span><br><span class="line">&#123;</span><br><span class="line">    [super updateViewConstraints];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五. 引用MASConstraint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// one : 创建一个引用</span><br><span class="line">@property (strong, nonatomic) MASConstraint *constraint;</span><br><span class="line">// two : 赋值</span><br><span class="line">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.left.and.right.equalTo(self.view);</span><br><span class="line">    make.top.equalTo(self.mas_topLayoutGuideBottom);</span><br><span class="line">    _constraint = make.height.equalTo(@(value ...));</span><br><span class="line">&#125;];</span><br><span class="line">// three : 更新约束的值</span><br><span class="line">_constraint.equalTo(@(ohter value...));</span><br></pre></td></tr></table></figure>

<p>此外还可以这么操作:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 卸载这根儿约束</span><br><span class="line">[_constraint uninstall];</span><br><span class="line">// 在把这根儿约束填上</span><br><span class="line">[_constraint install];</span><br></pre></td></tr></table></figure>

<p>更新UITabelViewCell的高度的两种方式:</p>
<ol>
<li>刷新方法1</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只会重新计算高度,不会reload cell,所以只是把原来的cell撑大了而已,还是同一个cell实例</span></span><br><span class="line">[_tableView beginUpdates];</span><br><span class="line">[_tableView endUpdates];</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>刷新方法2</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先重新计算高度,然后reload,不是原来的cell实例</span><br><span class="line">[_tableView reloadRowsAtIndexPaths:@[index] withRowAnimation:UITableViewRowAnimationFade];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后还可以通过下面的方式来展示更新的效果</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[_tableView scrollToRowAtIndexPath:index atScrollPosition:UITableViewScrollPositionMiddle animated:YES];</span><br></pre></td></tr></table></figure>

<p>六. 巧用优先级保证内容可见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// _containerView 中包含了一个 支持滑动的_tipLabel</span><br><span class="line">// step one : </span><br><span class="line">[_tipLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    // 设置边界条件约束，保证内容可见，优先级1000</span><br><span class="line">    make.left.greaterThanOrEqualTo(_containerView.mas_left);</span><br><span class="line">    make.right.lessThanOrEqualTo(_containerView.mas_right);</span><br><span class="line">    make.top.greaterThanOrEqualTo(_containerView.mas_top);</span><br><span class="line">    make.bottom.lessThanOrEqualTo(_containerView.mas_bottom);</span><br><span class="line">	// 优先级要比边界条件低750</span><br><span class="line">    _leftConstraint = make.centerX.equalTo(_containerView.mas_left).with.offset(50).priorityHigh();</span><br><span class="line">    // 优先级要比边界条件低750</span><br><span class="line">    _topConstraint = make.centerY.equalTo(_containerView.mas_top).with.offset(50).priorityHigh(); </span><br><span class="line">    make.width.mas_equalTo(CGRectGetWidth(_tipLabel.frame) + 8);</span><br><span class="line">    make.height.mas_equalTo(CGRectGetHeight(_tipLabel.frame) + 4);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// setp two </span><br><span class="line">UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panWithGesture:)];</span><br><span class="line">[_containerView addGestureRecognizer:pan];</span><br><span class="line"></span><br><span class="line">// setp three</span><br><span class="line">- (void)panWithGesture:(UIPanGestureRecognizer *)pan </span><br><span class="line">&#123;</span><br><span class="line">    CGPoint touchPoint = [pan locationInView:_containerView];</span><br><span class="line">    _logLabel.text = NSStringFromCGPoint(touchPoint);</span><br><span class="line">    _leftConstraint.offset = touchPoint.x;</span><br><span class="line">    _topConstraint.offset = touchPoint.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>七. 约束生效时机(以动画为例)</p>
<p>创建一个承载改变约束的视图View</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property (nonatomic, strong) UILabel *animationLabel;</span><br></pre></td></tr></table></figure>

<p>设置最初的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 有个引用约束的前提</span><br><span class="line">@property (nonatomic, strong) MASConstraint *centerXConstraint;</span><br><span class="line">// 设置最初的位置</span><br><span class="line">[_animationLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.width.equalTo(@(200));</span><br><span class="line">    make.height.equalTo(@(40));</span><br><span class="line">    _centerXConstraint = make.centerX.equalTo(self.view.mas_centerX);</span><br><span class="line">    make.centerY.equalTo(self.view.mas_centerY);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>核心, 查看约束生效时机带来的动画效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)action:(id)sender </span><br><span class="line">&#123;</span><br><span class="line">    // 设置初始状态</span><br><span class="line">    _centerXConstraint.equalTo(@(-CGRectGetWidth(self.view.frame)));</span><br><span class="line">    // 立即让约束生效</span><br><span class="line">    [self.view layoutIfNeeded];</span><br><span class="line">    </span><br><span class="line">    // 设置动画约束</span><br><span class="line">    _centerXConstraint.equalTo(@0);</span><br><span class="line">    // 动画生效</span><br><span class="line">    [UIView animateWithDuration:0.3f animations:^&#123;</span><br><span class="line">        [self.view layoutIfNeeded];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>Masonry读后感</title>
    <url>/2018/07/30/Masonry%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h1 id="iOS-布局"><a href="#iOS-布局" class="headerlink" title="iOS 布局"></a>iOS 布局</h1><h2 id="Frame-amp-Bounds"><a href="#Frame-amp-Bounds" class="headerlink" title="Frame &amp; Bounds"></a>Frame &amp; Bounds</h2><p>Frame定义：<br>表示一个View的位置和大小，使用其父视图坐标系。</p>
<p>Bounds定义：<br>表示一个View的位置和大小，使用其自身的坐标系。</p>
<span id="more"></span>

<p>注意点：</p>
<ol>
<li><p>在其父视图坐标器中最小的矩形框。(当view的transform变更时), 这就意味着如果一个视图发生了形变，我们不应该再使用frame的值了。<br><a href="https://developer.apple.com/documentation/uikit/uiview/1622459-transform">官方文档</a></p>
</li>
<li><p>当我们修改transform属性的时，所有的变化都是<a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/WindowsandViews/WindowsandViews.html#//apple_ref/doc/uid/TP40009503-CH2-SW7">基于视图view的center进行</a>的。谈到center，能影响到的就是<code>anchorPoint</code>。这里是<a href="https://developer.apple.com/documentation/quartzcore/calayer/1410817-anchorpoint?language=objc#">官方描述</a></p>
</li>
<li><p>关于transfrom这里也提供一个<a href="https://stackoverflow.com/questions/34438889/how-to-do-transforms-on-a-calayer/34438890#34438890">链接</a></p>
</li>
</ol>
<p>什么时候使用Bounds &amp; 什么时候使用Frame ？</p>
<p>frame: 由于frame反应了一个view在其父视图的位置，所以当设置一些外部变化的时候使用，比如设置宽高，距离父视图或某个视图的距离。</p>
<p>bounds: view内在的一些变化需要使用bounds，比如：布局其子视图、绘制一些元素。另外当view发生形变之后获取宽高也用bounds。</p>
<p>Demo演示: </p>
<p>基于View实现ScrollView：</p>
<blockquote>
<p>AutoLayout非常好，但是官方的API不容易使用， Masonry 解决了这个；</p>
</blockquote>
<p>Masonry 简单类图</p>
<p><img src="http://tva1.sinaimg.cn/large/006eNNDcly1h6c4d8x262j310p0km76p.jpg" alt="Masonry.png"></p>
<p>Masonry最简单的使用:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.aView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.left.equalTo(<span class="keyword">self</span>.view)</span><br><span class="line">    make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">100</span>)</span><br><span class="line">    make.width.height.mas_equalTo(<span class="number">200</span>)</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="从这里-mas-makeConstraints-开始"><a href="#从这里-mas-makeConstraints-开始" class="headerlink" title="从这里 mas_makeConstraints 开始"></a>从这里 <code>mas_makeConstraints</code> 开始</h2><p>MAS_VIEW 添加约束有三种方式：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="type">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="type">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="type">void</span>(^)(MASConstraintMaker *make))block;</span><br></pre></td></tr></table></figure>

<p>通过方法名，很容易知道这几个方法的差异</p>
<ol>
<li>添加约束.</li>
<li>更新约束.</li>
<li>重新设置约束.</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="type">void</span>(^)(MASConstraintMaker *))block &#123;</span><br><span class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</span><br><span class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</span><br><span class="line">    block(constraintMaker);</span><br><span class="line">    <span class="keyword">return</span> [constraintMaker install];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>line 1:  设置translatesAutoresizingMaskIntoConstraints &#x3D; NO</p>
<ul>
<li>YES: 系统会将一些属性例如Frame转换成constraints， Default Vlaue in Code View</li>
<li>NO: IB Default Value</li>
</ul>
<p>line 2: 使用当前view实例化MASConstraintMaker</p>
<p>line 3: 执行传进来block，配置maker</p>
<p>注意: 很多人有个疑惑，当使用Masonry时，我们经常在block中直接的引用self，为什么没有形成循环引用？</p>
<p>通过源码可以看出：</p>
<ol>
<li>首先，block强引用了self</li>
<li>假如我们在VC中使用上面的代码， self &#x3D; VC , block -&gt;  VC -&gt; view ;</li>
<li>这个block没有任何对象持有，所以执行完以后就会销毁。</li>
</ol>
<h2 id="MASConstraintMaker"><a href="#MASConstraintMaker" class="headerlink" title="MASConstraintMaker"></a>MASConstraintMaker</h2><p>先看初始化方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">id</span>)initWithView:(MAS_VIEW *)view &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.view = view;</span><br><span class="line">    <span class="keyword">self</span>.constraints = <span class="built_in">NSMutableArray</span>.new;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MAS_VIEW</code>宏使用，为了框架跨平台 iOS &amp; tvOS &amp; macOS</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> TARGET_OS_IPHONE || TARGET_OS_TV</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MAS_VIEW UIView</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> TARGET_OS_MAC</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MAS_VIEW NSView</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>line 1: Maker对象引用（weak）了MAS_VIEW, 因为view如果不存在了，maker存在也没有意义，所以没有必要进行（strong）引用。</p>
<p>line 2: 实例化约束数组，存储了所有加到当前视图上的约束对象。</p>
<p><code>make.left</code>调用发生了什么:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint *)left &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeLeft</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> constraint:<span class="literal">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</span><br><span class="line">&#125;</span><br><span class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!constraint) &#123;</span><br><span class="line">        newConstraint.delegate = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span>.constraints addObject:newConstraint];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newConstraint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终，都会调用到<code>- constraint: addConstraintWithLayoutAttribute:</code>里，这里删除了跟<code>make.left</code>无关的代码，后面会提到。</p>
<p>line 1: 设置初始化的MASViewConstraint的代理对象为self<br>line 2: 集合中添加这根约束<br>line 3: 返回Constraint对象</p>
<p>到此为止：make.left 这个方法调用执行完毕，生成了一个MASConstraint对象。</p>
<h2 id="MASConstraint"><a href="#MASConstraint" class="headerlink" title="MASConstraint"></a>MASConstraint</h2><p>声明：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MASConstraint.h</span></span><br><span class="line">- (MASConstraint * (^)(<span class="type">id</span> attr))equalTo;</span><br></pre></td></tr></table></figure>

<p><code>make.left.equalTo(self.view)</code>调用时发生了什么？</p>
<p>乍一看，这个方法很奇怪，返回了一个block对象，这个block接受一个id类型参数并且返回MASConstraint类型对象。我们知道OC调用方法不能使用点语法（属性getter除外），事实上，可以把equalTo看成一个block类型的属性，这个就是属性的getter方法。</p>
<p>实现如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint * (^)(<span class="type">id</span>))equalTo &#123;</span><br><span class="line">    <span class="keyword">return</span> ^<span class="type">id</span>(<span class="type">id</span> attribute) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.equalToWithRelation(attribute, <span class="built_in">NSLayoutRelationEqual</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们直接进入<code>- equalToWithRelation</code>方法中，发现实现体重只有<code>MASMethodNotImplemented()</code>, 证明该方法是抽象想的在MASConstraint中，搜索发现有两个子类：</p>
<ul>
<li>MASViewConstraint</li>
<li>MASCompositeConstraint</li>
</ul>
<p>注意：抽象方法的实现很有意思，在OC中并没有关于抽象方法的定义，如果运行时直接调用到了MASConstraint，这里采用了抛出一个异常的方式，这会引起crash，这种实现抽象类的方式值得学习。</p>
<ul>
<li>方法名决定了 NSLayoutRelation</li>
<li>参数决定attr</li>
</ul>
<h2 id="MASViewConstraint"><a href="#MASViewConstraint" class="headerlink" title="MASViewConstraint"></a>MASViewConstraint</h2><p>先看简单MASViewConstraint对于equalToWithRelation实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint * (^)(<span class="type">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</span><br><span class="line">    <span class="keyword">return</span> ^<span class="type">id</span>(<span class="type">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span>.class]) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.hasLayoutRelation || <span class="keyword">self</span>.layoutRelation == relation &amp;&amp; [attribute isKindOfClass:<span class="built_in">NSValue</span>.class], <span class="string">@&quot;Redefinition of constraint relation&quot;</span>);</span><br><span class="line">            <span class="keyword">self</span>.layoutRelation = relation;</span><br><span class="line">            <span class="keyword">self</span>.secondViewAttribute = attribute;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们这里就equalTo来看，直接进入else逻辑：</p>
<p>line 1：断言判断这里判断关系是否重复建立。这里有环境<code>断言的坑</code><br>line 2：设置关系<br>line 3: 设置约束</p>
<p>事实上，者不难能理解，一个约束（除了size）需要包含3个东西，first ViewAttribute, secondViewAttribute, Layout Relation.</p>
<p>setter 方法中干的什么事情:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)setSecondViewAttribute:(<span class="type">id</span>)secondViewAttribute &#123;</span><br><span class="line">    <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</span><br><span class="line">        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class="keyword">self</span>.firstViewAttribute.layoutAttribute];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</span><br><span class="line">        _secondViewAttribute = secondViewAttribute;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@&quot;attempting to add unsupported attribute: %@&quot;</span>, secondViewAttribute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启发?</p>
<p>为了对传入值灵活配置，我们可以将复杂的逻辑收敛起来。</p>
<p>这三种类型分别可以通过以下3条语句映射：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">make.width.mas_equalTo(<span class="number">100</span>)</span><br><span class="line">make.left.equalTo(<span class="keyword">self</span>.view)</span><br><span class="line">make.left.equalTo(<span class="keyword">self</span>.view.mas_left)</span><br></pre></td></tr></table></figure>

<p>可以从setSecondViewAttribute中看出来，line 2 &amp; line3 基本上是等价的；<br>line 2 就是一个传入了MASViewAttribute，一个传入了MAS_VIEW并内部生成了一个MASViewAttribute，当然这里MAS_VIEW对应的 layoutAttribute 则采用用是firstView的。<br>line 3 直接传入的是MASViewAttribute，可以直接被持有。</p>
<h2 id="MASViewAttribute"><a href="#MASViewAttribute" class="headerlink" title="MASViewAttribute"></a>MASViewAttribute</h2><p>MASViewAttribute 干了三件事:</p>
<ul>
<li>持有了MAS_VIEW对象</li>
<li>id类型的item</li>
<li>持有了NSLayoutAttribute对象</li>
</ul>
<p>MASViewAttribute提供了两个实例化:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">id</span>)initWithView:(MAS_VIEW *)view layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithView:view item:view layoutAttribute:layoutAttribute];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">id</span>)initWithView:(MAS_VIEW *)view item:(<span class="type">id</span>)item layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    _view = view;</span><br><span class="line">    _item = item;</span><br><span class="line">    _layoutAttribute = layoutAttribute;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常情况下，item同view指向相同。当使用 VC-related interface 指向ID &lt; UILayoutSupport&gt;</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>当maker配置完成之后，就轮到了install了，intall源码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)install &#123;</span><br><span class="line">    ...</span><br><span class="line">    MAS_VIEW *firstLayoutItem = <span class="keyword">self</span>.firstViewAttribute.item;</span><br><span class="line">    <span class="built_in">NSLayoutAttribute</span> firstLayoutAttribute = <span class="keyword">self</span>.firstViewAttribute.layoutAttribute;</span><br><span class="line">    MAS_VIEW *secondLayoutItem = <span class="keyword">self</span>.secondViewAttribute.item;</span><br><span class="line">    <span class="built_in">NSLayoutAttribute</span> secondLayoutAttribute = <span class="keyword">self</span>.secondViewAttribute.layoutAttribute;</span><br><span class="line">    ...</span><br><span class="line">    MASLayoutConstraint *layoutConstraint</span><br><span class="line">        = [MASLayoutConstraint constraintWithItem:firstLayoutItem</span><br><span class="line">                                        attribute:firstLayoutAttribute</span><br><span class="line">                                        relatedBy:<span class="keyword">self</span>.layoutRelation</span><br><span class="line">                                           toItem:secondLayoutItem</span><br><span class="line">                                        attribute:secondLayoutAttribute</span><br><span class="line">                                       multiplier:<span class="keyword">self</span>.layoutMultiplier</span><br><span class="line">                                         constant:<span class="keyword">self</span>.layoutConstant];</span><br><span class="line">    ...</span><br><span class="line">    MAS_VIEW *closestCommonSuperview = [<span class="keyword">self</span>.firstViewAttribute.view mas_closestCommonSuperview:<span class="keyword">self</span>.secondViewAttribute.view];</span><br><span class="line">    <span class="keyword">self</span>.installedView = closestCommonSuperview;</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">self</span>.installedView addConstraint:layoutConstraint];</span><br><span class="line">    <span class="keyword">self</span>.layoutConstraint = layoutConstraint;</span><br><span class="line">    [firstLayoutItem.mas_installedConstraints addObject:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里主要的逻辑是：</p>
<ol>
<li>根据两个viewAttribute使用系统API生成了一个MASLayoutConstraint对象。</li>
<li>调用 mas_closestCommonSuperview 方法找到最近的共同的父视图。</li>
<li>将constraint添加到这个视图上。</li>
<li>一些记录操作，self持有了layoutConstraint， firstLayoutItem的mas_installedConstraints集合里添加constraint</li>
</ol>
<p>其中：mas_closestCommonSuperview 实现可以看下；</p>
<p>当然，这里有很多判断，这里只讨论了最通用的流程，到此为止，添加约束的逻辑完成了。</p>
<h2 id="MASCompositeConstraint"><a href="#MASCompositeConstraint" class="headerlink" title="MASCompositeConstraint"></a>MASCompositeConstraint</h2><p>倒回去看，在分析 make.left 执行的过程中，忽略了一部分关于 MASCompositeConstraint 代码，这里接着分析下：</p>
<p>在一开始的例子中：make.width.height.mas_equalTo(200); 会执行到这部分逻辑里：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</span><br><span class="line">        <span class="comment">//replace with composite constraint</span></span><br><span class="line">        <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</span><br><span class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</span><br><span class="line">        compositeConstraint.delegate = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</span><br><span class="line">        <span class="keyword">return</span> compositeConstraint;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> newConstraint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们执行 make.width&amp;left&amp;right&amp;top&amp;bottom等等，会生成一个MASViewAttribute对象，当我们紧接着调用height的时候，会生成一个MASCompositeConstraint对象（这个对象持有了MASConstraint-type数组），然后使用CompoeConstraint替换original constrConstraint；<br>Masonry正是用这个对象去支持同时设置很多个constraint</p>
<p>有人会问，上面的判断貌似只能对第二次设置有效，make.top.left.bottom.right.equalTo(self.view); 像这样make.top.left 返回了MASCompositeConstraint，再继续调用bottom，就完全在MASCompositeConstraint内部处理了:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint *)constraint:(MASConstraint __unused *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    <span class="type">id</span>&lt;MASConstraintDelegate&gt; strongDelegate = <span class="keyword">self</span>.delegate;</span><br><span class="line">    MASConstraint *newConstraint = [strongDelegate constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</span><br><span class="line">    newConstraint.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.childConstraints addObject:newConstraint];</span><br><span class="line">    <span class="keyword">return</span> newConstraint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里自己作为自己的代理，MASCompositeConstraint在第二次生成了 - constraint: addConstraint With LayoutAttribute: method.中添加了新增的约束,其中新增的约束是通过下面的代码实现的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> newConstraint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Masonry 的代码量不大，因为逻辑复用比较多，各种block嵌套，抽象方法的使用。但是这库是非常优秀的，他教会了我们如果提供一个简单的接口方案。教会了我们如何将复杂的东西让人用起来如此简单；</p>
<h3 id="调用链设计"><a href="#调用链设计" class="headerlink" title="调用链设计"></a>调用链设计</h3><p>Masony 使用了大量的block实现了链式调用，链式的使用节省了大段代码边写，且更容易理解。</p>
<h3 id="抽象方法的实现"><a href="#抽象方法的实现" class="headerlink" title="抽象方法的实现"></a>抽象方法的实现</h3><p>使用宏实现抽象方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MASMethodNotImplemented() \</span></span><br><span class="line"><span class="meta">    @throw [NSException exceptionWithName:NSInternalInconsistencyException \</span></span><br><span class="line"><span class="meta">                                   reason:[NSString stringWithFormat:@<span class="string">&quot;You must override %@ in a subclass.&quot;</span>, NSStringFromSelector(_cmd)] \</span></span><br><span class="line"><span class="meta">                                 userInfo:nil]</span></span><br></pre></td></tr></table></figure>

<h3 id="包装宏的使用"><a href="#包装宏的使用" class="headerlink" title="包装宏的使用"></a>包装宏的使用</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MASConstraint</span> (<span class="title">AutoboxingSupport</span>)</span></span><br><span class="line"></span><br><span class="line">- (MASConstraint * (^)(<span class="type">id</span> attr))mas_equalTo;</span><br><span class="line">- (MASConstraint * (^)(<span class="type">id</span> attr))mas_greaterThanOrEqualTo;</span><br><span class="line">- (MASConstraint * (^)(<span class="type">id</span> attr))mas_lessThanOrEqualTo;</span><br><span class="line"></span><br><span class="line">- (MASConstraint * (^)(<span class="type">id</span> offset))mas_offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="避免循环引用的方式"><a href="#避免循环引用的方式" class="headerlink" title="避免循环引用的方式"></a>避免循环引用的方式</h3><p>使用block有两个比较烦的地方</p>
<ol>
<li>循环引用</li>
<li>回调地狱</li>
</ol>
<p>Masonry 的完美设计, 让我们完全不用关心有这样的问题。</p>
<p>总之，这个库足够优秀；</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>OC对象本质</title>
    <url>/2018/07/26/OC%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<p>本文主要对OC语言进行阅读和分析的笔记<br>说起OC那么接触到的第一个对象应该就是NSObject了，那么NSObject是怎么实现的呢？点进去头文件可以看到下面的代码</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface NSObject &#123;</span><br><span class="line">	Class isa;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>可以看到NSObject只有一个成员isa， 通过下面命令看到OC转成c++看看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xcrun -sdk iphoneos clang -<span class="built_in">arch</span> arm64 -rewrite-objc &lt;OC源文件&gt; -o &lt;输出的cpp文件&gt;</span></span><br></pre></td></tr></table></figure>

<p>翻开cpp文件可以看见NSObject对象转成了下面的代码”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NSObject_IMPL</span> &#123;</span><br><span class="line">	Class isa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看来一个NSObject对象就是一个结构体，且里面也有一个成员isa，那么接下来看下isa是什么</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">objc_class</span> *Class;</span><br></pre></td></tr></table></figure>

<p>可以看出isa的类型是一个结构体指针</p>
]]></content>
      <categories>
        <category>OC语言</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite备忘录-01</title>
    <url>/2018/07/29/SQLite%E5%A4%87%E5%BF%98%E5%BD%95-01/</url>
    <content><![CDATA[<blockquote>
<p> SQLite是一个进程内的库，实现了<strong>自给自足的</strong>、<strong>无服务器的</strong>、<strong>零配置的</strong>、<strong>事务性的</strong> SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接，随连随用。SQLite 直接访问其存储文件。不需要一个单独的服务器进程或操作的系统（无服务器的）。SQLite 不需要配置，这意味着不需要安装或管理。一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。SQLite 是自给自足的，这意味着不需要任何外部的依赖。SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问,这个说的是事务，SQLite使用 ANSI-C 编写的，并提供了简单和易于使用的 API，SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。就是咱们所说的sql语句中的增删改查语法标准。</p>
</blockquote>
<span id="more"></span>

<p>一. 局限性</p>
<p>在SQL92 不支持的特性如下所示:</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RIGHT OUTER JOIN</td>
<td>只实现了 LEFT OUTER JOIN。</td>
</tr>
<tr>
<td>FULL OUTER JOIN</td>
<td>只实现了 LEFT OUTER JOIN。</td>
</tr>
<tr>
<td>ALTER TABLE</td>
<td>支持 RENAME TABLE 和 ALTER TABLE 的 ADD COLUMN variants 命令，不支持 DROP COLUMN、ALTER COLUMN、ADD CONSTRAINT。</td>
</tr>
<tr>
<td>Trigger 支持</td>
<td>支持 FOR EACH ROW 触发器，但不支持 FOR EACH STATEMENT 触发器。</td>
</tr>
<tr>
<td>VIEWs</td>
<td>在 SQLite 中，视图是只读的。您不可以在视图上执行 DELETE、INSERT 或 UPDATE 语句。</td>
</tr>
<tr>
<td>GRANT 和 REVOKE</td>
<td>可以应用的唯一的访问权限是底层操作系统的正常文件访问权限。</td>
</tr>
</tbody></table>
<p>二. 数据库支持的数据类型</p>
<p>SQLite数据类型是一个用来指定任何对象的数据类型的属性，SQLite中的每一列，每个变量和表达式都有相关的数据类型,你可以在创建表的同时使用这些数据类型,SQLite的存贮类数据类型，每个存贮在SQLite数据库中的值都具有下面存贮类之一：NULL（null） Integer（带符号的整数） Real （浮点数）Text（文本，使用UTF-8存贮） Blob （值是一个blob数据，完全根据它的输入存贮）</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> （<span class="type">int</span>，<span class="type">integer</span>，int2 ，int8）</span><br><span class="line">text	（<span class="type">character</span>（<span class="number">20</span>），text）</span><br><span class="line"><span class="keyword">None</span> 	（<span class="type">blob</span>）</span><br><span class="line"><span class="type">real</span> 	（<span class="keyword">double</span>，<span class="type">float</span>）</span><br><span class="line"><span class="type">numeric</span> （<span class="type">boolean</span> <span class="type">date</span>）</span><br></pre></td></tr></table></figure>

<p>三. SQLite 命令</p>
<p>​	与关系数据库进行交互的标准SQLite命令类似于SQL </p>
<p>​	DDL （数据库定义语言）</p>
<p>​	DML  （数据库操纵语言）</p>
<p>​	DQL（数据库查询语言）  </p>
<p>​	DCL （数据库控制语言）</p>
<p>​	DQL基本结构是有select子句，from子句，where子句组成的查询块</p>
<p>​	select 《字段名表》 from 《表或视图》 where 《查询条件》</p>
<p>​	DML数据库操纵语言</p>
<p>​	insert update delete</p>
<p>​	DDL数据库定义语言</p>
<p>​	用来创建数据库中的各种对象（表，视图，索引，同义词等）</p>
<p>​	create table  alter  drop</p>
<p>​	数据库定义语言是稳性提交的，不能rollback</p>
<p>​	DCL数据库控制语言</p>
<p>​	用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的	时间，效果，对数据实行监视等</p>
<p>​	如 rollback commit</p>
<p>​	sql 语言是数据库的核心语言，是一个标准的数据语言，是面向集合的描述性非过程化语言，功能强，效率高，简单易学维护</p>
<p>四. SQLite语法 </p>
<ul>
<li>sqlite是不区分大小写的，但有特殊的情况 </li>
<li>以两个练习的—开始，并扩展到下一个换行符 </li>
<li>所有的语句必须以；结束</li>
</ul>
<blockquote>
<p>创建表</p>
</blockquote>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>创建表的时候，我们需要在这里添加约束，约束的好处有很多</p>
<ul>
<li>not null 确保某列不能有null值</li>
<li>default 约束 当某列没有指定值的时候，为该列提供默认值</li>
<li>unique 约束 确保某列中的所有值是不同的</li>
<li>promary key约束 唯一标识数据库表中的各行／记录</li>
<li>check 约束 check约束确保某列中的所有值满足一定的条件</li>
<li>ALTER TABLE 命令允许用户重命名表，或向现有表添加一个新的列。</li>
<li>创建好约束之后，在想添加或者删除约束都是不可能的。</li>
<li>重命名列，删除一列，或者从一个表中添加或者删除约束是不可能的</li>
</ul>
<blockquote>
<p>删除表</p>
</blockquote>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<p>drop table语句 用来删除表定义及其所有相关数据，索引，触发器，约束和该表的权限规范	使用此命令时要特别注意，因为一旦一个表被删除，表中所有信息也将永远丢失所以不支持事务的操作，因为没有回滚操作</p>
<blockquote>
<p>插入表</p>
</blockquote>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> （…） <span class="keyword">values</span> （…）</span><br></pre></td></tr></table></figure>

<p>插入的数据可以是从其他表中查询出来的，也可以是自己插入的，或者是触发器插入的。 </p>
<blockquote>
<p>查找数据 </p>
</blockquote>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column1，column2  <span class="keyword">from</span> tableName</span><br></pre></td></tr></table></figure>

<p>select语句用于从SQLite数据库表中获取数据，以结果表的形式返回数据，这些结果也被称为**结果集 **,这里的column1是表的字段，他们即是你想要获取的，如果获取所有的，可以用* </p>
<ul>
<li>查找所有的表</li>
</ul>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tbl_name <span class="keyword">FROM</span> SQLite_master <span class="keyword">WHERE</span> type <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看表的完整信息</li>
</ul>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sql</span> <span class="keyword">FROM</span> SQLite_master <span class="keyword">WHERE</span> type <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span> <span class="keyword">AND</span> tbl_name <span class="operator">=</span> <span class="string">&#x27;COMPANY&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 运算符 </p>
</blockquote>
<p>​	算术运算符（+，-，X，除，取模），比较运算符（&#x3D;&#x3D;  , &#x3D; , !&#x3D; ,&lt;&gt;,&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,!&lt;,!&gt;），逻辑运算符 (and ,between,esists,in,not in ,like,glob,not ,or , is null, is ,|| ,unique) </p>
<blockquote>
<p>表达式 </p>
</blockquote>
<p>​	表达式是一个或多个值，运算符和计算值的sql函数的组合，sql表达式与公式类似，都写在查询语言中</p>
<ul>
<li><p>bool表达式</p>
<pre><code>  在匹配单个值的基础上获取数据
</code></pre>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">matching</span><br></pre></td></tr></table></figure>

<blockquote>
<p>WHERE</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> (子句)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UPDATE</p>
</blockquote>
<p>​	update 查询用于修改表中已有的记录，可以使用带有where子句的update 查询来更新选定行，否则所有的行都会被更新</p>
<p>​	update table set （key1 &#x3D; value1 ，key2 &#x3D; value2） where 。如果更改所有的值，就不需要传where子句</p>
<blockquote>
<p> DELETE</p>
</blockquote>
<p>​	delete 查询用于删除表中的已有记录，可以使用where子句的delete查询来删除选定行，否则所有的记录都被删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span>  <span class="keyword">where</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> LIKE</p>
</blockquote>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">LIKE</span> ‘_XXXX_<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>%代表0个 一个 或者多个,下划线 表示一个</p>
</blockquote>
<blockquote>
<p> GLOB</p>
</blockquote>
<p>​	用法类似 like （*  ？）</p>
<p>​	星号，问号</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> GLOB <span class="string">&#x27;XXXX*&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>LIMIT</p>
</blockquote>
<p>​	limit子句用于限制由select语句返回的数据数量</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, columnN </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT [<span class="keyword">no</span> <span class="keyword">of</span> <span class="keyword">rows</span>] <span class="keyword">OFFSET</span> [<span class="type">row</span> num]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> COMPANY LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> ORDER BY</p>
</blockquote>
<p>order by 子句是用来基于一个或多个列按照升序和降序顺序排列</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span><span class="operator">-</span>list </span><br><span class="line"><span class="keyword">FROM</span> table_name </span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>] </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, .. columnN] [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>];</span><br><span class="line"># 默认是升序</span><br></pre></td></tr></table></figure>

<blockquote>
<p> GROUP BY</p>
</blockquote>
<p>SQLite的gruop by 子句用于与select语句一起使用，来对相同的数据进行分组</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span><span class="operator">-</span>list</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> [ conditions ]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2....columnN</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2….columnN</span><br></pre></td></tr></table></figure>

<p>按照名字分组的话，那么产生的数据中，name就只能出现一次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME, <span class="built_in">SUM</span>(SALARY) <span class="keyword">FROM</span> COMPANY <span class="keyword">GROUP</span> <span class="keyword">BY</span> NAME;</span><br></pre></td></tr></table></figure>

<p>group by 和 order by一起使用</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NAME, <span class="built_in">SUM</span>(SALARY) </span><br><span class="line"><span class="keyword">FROM</span> COMPANY <span class="keyword">GROUP</span> <span class="keyword">BY</span> NAME <span class="keyword">ORDER</span> <span class="keyword">BY</span> NAME <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> HAVING</p>
</blockquote>
<p>HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。</p>
<p>WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 	子句创建的分组上设置条件。</p>
<p>​	SELECT</p>
<p>​	FROM</p>
<p>​	WHERE</p>
<p>​	GROUP BY</p>
<p>​	HAVING</p>
<p>​	ORDER BY</p>
<p>​	SELECT * FROM COMPANY GROUP BY name HAVING count(name) &lt; 2;</p>
<blockquote>
<p> DISTINCT</p>
</blockquote>
<p>​	SQLite 的 <strong>DISTINCT</strong> 关键字与 SELECT 语句一起使用，来消除所有重复的记	录，并只获取唯一一次记录。</p>
<p>​	有可能出现一种情况，在一个表中有多个重复的记录。当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。</p>
<figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2,.....columnN </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> [<span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQLite</category>
      </categories>
      <tags>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite备忘录-02</title>
    <url>/2018/07/29/SQLite%E5%A4%87%E5%BF%98%E5%BD%95-02/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>SQLite</category>
      </categories>
      <tags>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu服务器安装shadowsocks穿墙</title>
    <url>/2018/03/02/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85shadowsocks%E7%A9%BF%E5%A2%99/</url>
    <content><![CDATA[<ol>
<li><p>需要一台服务器, Linux系统</p>
<span id="more"></span>
</li>
<li><p>使用ssh连接到服务器</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh &lt;ip&gt; -p &lt;port&gt; </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>ssh连接成功后安装shadowsocks多用户服务(脚手架献上)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh </span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-go.sh</span><br><span class="line">./shadowsocks-go.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-go.log</span><br></pre></td></tr></table></figure>
<p>成功后的样子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Congratulations, shadowsocks-go install completed!</span><br><span class="line">Your Server IP:your_server_ip</span><br><span class="line">Your Server Port:your_server_port</span><br><span class="line">Your Password:your_password</span><br><span class="line">Your Local Port:1080</span><br><span class="line">Your Encryption Method:aes-256-cfb</span><br><span class="line">Welcome to visit:http://teddysun.com/392.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>配置账号</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<p>4.1 单账号配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span><span class="number">8989</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span><span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;rc4-md5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">300</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>4.2 多账号配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port_password&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;8989&quot;</span><span class="punctuation">:</span><span class="string">&quot;password0&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;9001&quot;</span><span class="punctuation">:</span><span class="string">&quot;password1&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;9002&quot;</span><span class="punctuation">:</span><span class="string">&quot;password2&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;9003&quot;</span><span class="punctuation">:</span><span class="string">&quot;password3&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;9004&quot;</span><span class="punctuation">:</span><span class="string">&quot;password4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;aes-256-cfb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">600</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>shadowsocks服务的日常基操</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动：</span></span><br><span class="line">$ /etc/init.d/shadowsocks start</span><br><span class="line"><span class="comment"># 停止：</span></span><br><span class="line">$ /etc/init.d/shadowsocks stop</span><br><span class="line"><span class="comment"># 重启：</span></span><br><span class="line">$ /etc/init.d/shadowsocks restart</span><br><span class="line"><span class="comment"># 状态：</span></span><br><span class="line">$ /etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>UML-类图</title>
    <url>/2020/07/27/UML-%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<p>在面对业务日趋复杂的趋势下, 下意识的编写代码可能会导致今后的灾难, 面对现状,我们需要去仔细的设计一些结构和关系, 这样才能对复杂业务应对自如. 少掉写头发.</p>
<span id="more"></span>

<p>类图:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5jn0nd6cj30v60bj0sn.jpg">



<p>下面对上面的图进行描述:</p>
<ul>
<li>abstract，表示车是一个抽象类</li>
<li>小汽车和自行车与abstract实现关系(使用带空心箭头的虚线表示)</li>
<li>小汽车为与SUV之间也是继承关系, 它们之间的关系为泛化关系(使用带空心箭头的实线表示)</li>
<li>小汽车与发动机之间是组合关系(使用带实心箭头的实线表示)</li>
<li>学生与班级之间是聚合关系(使用带空心箭头的实线表示)</li>
<li>学生与身份证之间为关联关系(使用一根实线表示)</li>
<li>学生需要用到自行车，与自行车是一种依赖关系(使用带箭头的虚线表示)</li>
</ul>
<p>关系</p>
<ul>
<li><p>泛化关系(generalize)</p>
<p>用带空心箭头的实线表示;</p>
<p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系;</p>
<blockquote>
<p>最终代码中，泛化关系表现为继承非抽象类.</p>
</blockquote>
</li>
<li><p>实现关系(realize)</p>
<p>实现关系用一条带空心箭头的虚线表示；</p>
<p>”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象;</p>
<blockquote>
<p>最终代码中，实现关系表现为继承抽象类；</p>
</blockquote>
</li>
<li><p>聚合关系(aggregation)</p>
<p>用一条带空心菱形箭头的直线表示;</p>
<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>
<p>与组合关系不同的是，整体和部分不是强依赖的，<em>即使整体不存在了，部分仍然存在；</em>例如， 部门撤销了，人员不会消失，他们依然存在；</p>
</li>
<li><p>组合关系(composition)</p>
<p>组合关系用一条带实心菱形箭头直线表示;</p>
<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>
<p>但组合关系是一种强依赖的特殊聚合关系，<em>如果整体不存在了，则部分也不存在了；</em>例如， 公司不存在了，部门也将不存在了；</p>
</li>
<li><p>关联关系(association)</p>
<p>关联关系是用一条直线表示的；</p>
<p>它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>
<p>比如，乘车人和车票之间就是一种关联关系, 人和身份证之间的关系也是一种关联关系;</p>
<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5jgv8w8ij30bg039gld.jpg">

<blockquote>
<p>在最终代码中，关联对象通常是以成员变量的形式实现的；</p>
</blockquote>
</li>
<li><p>依赖关系(dependency)</p>
<p>依赖关系是用一套带箭头的虚线表示的;</p>
<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p>
<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>
<blockquote>
<p>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>vim备忘录</title>
    <url>/2020/07/26/vim%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>本文对vim常见的操作进行简单的记录，方便需要的时候快速查阅，完全是为了弥补脑容量有限的问题。</p>
<span id="more"></span>

<p>一. 查找操作</p>
<p>基操：在normal模式下按下“&#x2F;”即可以进入查找模式，输入要查找的内容并按下回车，n键向下查找， N向上查找。</p>
<p>补充：vim查找是支持正则的， 如：&#x2F;hello$， 是查找hello为行尾的记录， 如果真的想搜索hello$， 那么转义即可，&#x2F;hello$</p>
<p>大小写问题：&#x2F;c代表大小写不敏感查找， &#x2F;C代表大小写敏感查找， 默认是敏感查找，如果需要改默认行为，将下面代码复制到~&#x2F;.vimrc文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; 设置默认进行大小写不敏感查找</span></span><br><span class="line"><span class="string">set ignorecase</span></span><br><span class="line"><span class="string">&quot;</span> 如果有一个大写字母，则切换到大小写敏感查找</span><br><span class="line"><span class="built_in">set</span> smartcase </span><br></pre></td></tr></table></figure>

<p>查找当前单词：在normal模式下， 按下<code>*</code>键进行查找， 例如当前为<code>foo</code>， 可以匹配<code>foo bar</code>中的<code>foo</code>，但不可匹配<code>foobar</code>中的<code>foo</code>。 这在查找函数名、变量名时非常有用。按下<code>g*</code>即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即<code>foo bar</code>和<code>foobar</code>中的<code>foo</code>均可被匹配到。</p>
<p>二. 查找并替换</p>
<p>:s （substitute）用来查找并替换， 语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure>

<p>作用范围:</p>
<ul>
<li>当前行：: 如: <code>:s/Hello/HELLO/g</code></li>
<li>全局:  :% 如: <code>:%s/Hello/HELLO/g</code></li>
<li>选区：:’&lt;,’&gt; 如: <code>:&#39;&lt;,&#39;&gt;s/foo/bar/g</code>  注意，在visual模式下， 直接按下冒号就会自动补全</li>
<li>2-11行：:5,12s&#x2F;foo&#x2F;bar&#x2F;g</li>
<li>当前行<code>.</code>与接下来两行<code>+2</code>：:.,+2s&#x2F;foo&#x2F;bar&#x2F;g</li>
</ul>
<p>替换标志</p>
<ul>
<li><p>目标的第一次出现： 空 ， :%s&#x2F;foo&#x2F;bar</p>
</li>
<li><p>大小写敏感和不敏感<code>i</code>表示大小写不敏感查找，<code>I</code>表示大小写敏感：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar/i</span><br><span class="line"><span class="comment"># 等效于模式中的\c（不敏感）或\C（敏感）</span></span><br><span class="line">:%s/foo\c/bar</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>c</code>表示需要确认，例如全局查找<code>&quot;foo&quot;</code>替换为<code>&quot;bar&quot;</code>并且需要确认：:%s&#x2F;foo&#x2F;bar&#x2F;gc</p>
</li>
</ul>
<p>三. 全选复制</p>
<ul>
<li>方式一<code>ggvGy</code></li>
<li>方式二 <code>ggyG</code></li>
<li>方式三 <code>:%y</code></li>
</ul>
<p>四. 字符查找 </p>
<p>例如：查找 ， @interface findworld 中的w字符，可以使用fw(正向查找)， Fw(反向查找)</p>
<p>五. 段落跳转</p>
<ul>
<li><code>(</code> <code>)</code> 跳转到句子首和句尾</li>
<li><code>&#123;</code> <code>&#125;</code>跳转到段首 和段尾</li>
</ul>
<p>六. vim中执行shell命令</p>
<ul>
<li><p><code>:!&#123;cmd&#125;</code> 例如： <code>:!ls</code></p>
<blockquote>
<p><code>:!!</code> 重复执行上一条shell命令</p>
</blockquote>
</li>
<li><p>c-z   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim index.html</span><br><span class="line">&lt;Ctrl-Z&gt;</span><br><span class="line"><span class="built_in">touch</span> index.js</span><br><span class="line"><span class="built_in">fg</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>七. 跳转技巧</p>
<ul>
<li><p><code>hjkl</code>基操，代表左下上右。</p>
</li>
<li><p><code>H</code> <code>M</code> <code>L</code> 跳转到屏幕上中下</p>
</li>
<li><p><code>w</code>跳转到下一个单词的开始，<code>e</code>调到当前单词的结束，<code>b</code>向后跳。</p>
</li>
<li><p><code>gg</code>跳转到文件的开始，<code>G</code>跳转到文件的结束，<code>10gg</code>&amp;<code>10G</code>表示跳转到第10行</p>
</li>
<li><p><code>^</code>跳转到行首，<code>$</code>跳转到行尾。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下rvm的安装和常用指令</title>
    <url>/2017/03/25/mac%E4%B8%8Brvm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>为什么要安装rvm</p>
<ul>
<li>mac OS 自带的ruby环境, 权限有限</li>
<li>使用自带的ruby更新,管理不方便</li>
</ul>
<p>检查系统正在使用的ruby</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> ruby</span></span><br></pre></td></tr></table></figure>

<p>如果是系统自带的,将回应:<code>user/bin/ruby</code></p>
<p>检查系统所用ruby版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ruby -v</span></span><br></pre></td></tr></table></figure>

<p>安装RVM </p>
<ol>
<li>参考<br><a href="https://rvm.io/rvm/install">https://rvm.io/rvm/install</a></li>
<li>先安装gunpg</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install gnupg</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装mpapis公钥(失败参考<code>https://rvm.io/rvm/install</code>安装)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装最新版本的ruby的rvm</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">\curl -sSL https://get.rvm.io | bash -s stable --ruby</span></span><br></pre></td></tr></table></figure>

<p>使用RVM</p>
<ol>
<li><p>列出RVM 使用的ruby版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>选择使用的ruby版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm use &lt;verison&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检查系统所用ruby版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> ruby</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设定默认的node版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvm <span class="built_in">alias</span> default v8.5.0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前使用的node版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvm current</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定版本的node</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvm uninstall v9.5.0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>常用指令<br>RVM </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ruby -v <span class="comment"># 查看ruby 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm list known <span class="comment"># 列出已知的 ruby 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm install 2.3.0 <span class="comment"># 选择指定 ruby 版本进行更新</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm get stable <span class="comment"># 更新 rvm</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm use 2.2.2 <span class="comment"># 切换到指定 ruby 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm use 2.2.2 --default <span class="comment"># 设置指定 ruby 版本为默认版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm list <span class="comment"># 查询已安装的 ruby 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rvm remove 1.9.2 <span class="comment"># 卸载移除 指定 ruby 版本</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -L https://get.rvm.io | bash -s stable <span class="comment"># 安装 rvm 环境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -sSL https://get.rvm.io | bash -s stable --ruby <span class="comment"># 默认安装 rvm 最新版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -sSL https://get.rvm.io | bash -s stable --ruby=2.3.0 <span class="comment"># 安装 rvm 指定版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> ~/.rvm/scripts/rvm <span class="comment"># 载入 rvm</span></span></span><br></pre></td></tr></table></figure>

<p>Gem</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem -v <span class="comment"># 查看 gem 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem <span class="built_in">source</span> <span class="comment"># 查看 gem 配置源</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem <span class="built_in">source</span> -l <span class="comment"># 查看 gem 配置源目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem sources -a url <span class="comment"># 添加 gem 配置源（url 需换成网址）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem sources --add url <span class="comment"># 添加 gem 配置源（url 需换成网址）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem sources -r url <span class="comment"># 删除 gem 配置源（url 需换成网址）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem sources --remove url <span class="comment"># 删除 gem 配置源（url 需换成网址）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem update <span class="comment"># 更新 所有包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem update --system <span class="comment"># 更新 Ruby Gems 软件</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem install rake <span class="comment"># 安装 rake，从本地或远程服务器</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem install rake --remote <span class="comment"># 安装 rake，从远程服务器</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem install watir -v 1.6.2 <span class="comment"># 安装 指定版本的 watir</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem install watir --version 1.6.2 <span class="comment"># 安装 指定版本的 watir</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem uninstall rake <span class="comment"># 卸载 rake 包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem list d <span class="comment"># 列出 本地以 d 打头的包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem query -n <span class="string">&#x27;&#x27;</span>[0-9]<span class="string">&#x27;&#x27;</span> --<span class="built_in">local</span> <span class="comment"># 查找 本地含有数字的包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem search <span class="built_in">log</span> --both <span class="comment"># 查找 从本地和远程服务器上查找含有 log 字符串的包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem search <span class="built_in">log</span> --remoter <span class="comment"># 查找 只从远程服务器上查找含有 log 字符串的包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem search -r <span class="built_in">log</span> <span class="comment"># 查找 只从远程服务器上查找含有log字符串的包</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem <span class="built_in">help</span> <span class="comment"># 提醒式的帮助</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem <span class="built_in">help</span> install <span class="comment"># 列出 install 命令 帮助</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem <span class="built_in">help</span> examples <span class="comment"># 列出 gem 命令使用一些例子</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem build rake.gemspec <span class="comment"># 把 rake.gemspec 编译成 rake.gem</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem check -v pkg/rake-0.4.0.gem <span class="comment"># 检测 rake 是否有效</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem cleanup <span class="comment"># 清除 所有包旧版本，保留最新版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem contents rake <span class="comment"># 显示 rake 包中所包含的文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem dependency rails -v 0.10.1 <span class="comment"># 列出 与 rails 相互依赖的包</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gem environment <span class="comment"># 查看 gem 的环境</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem -v <span class="comment"># 查看 gem 版本（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem install cocoa pods <span class="comment"># 安装 CocoaPods（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem install cocoapods <span class="comment"># 安装 CocoaPods（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem install cocoapods --pre <span class="comment"># 安装 CocoaPods 至预览版（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem install cocoapods -v 0.39.0 <span class="comment"># 安装 CocoaPods 指定版本（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem update cocoapods <span class="comment"># 更新 CocoaPods 至最新版（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem update cocoapods --pre <span class="comment"># 更新 CocoaPods 至预览版（以管理员权限）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo gem uninstall cocoapods -v 0.39.0 <span class="comment"># 移除 CocoaPods 指定版本（以管理员权限）</span></span></span><br></pre></td></tr></table></figure>

<p>pod</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod setup <span class="comment"># CocoaPods 将信息下载到~/.cocoapods/repos 目录下。如果安装 CocoaPods 时不执行此命令，在初次执行 pod intall 命令时，系统也会自动执行该指令</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod --version <span class="comment"># 检查 CocoaPods 是否安装成功及其版本号</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod install <span class="comment"># 安装 CocoaPods 的配置文件 Podfile</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>摘自网络, 总结于此</p>
</blockquote>
]]></content>
      <categories>
        <category>package manager</category>
      </categories>
      <tags>
        <tag>rvm</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树遍历</title>
    <url>/2015/10/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>本文讲述二叉树遍历的方式, 分别分为前序、中序、后序, 其中每种采用递归和非递归的方式实现.</p>
<span id="more"></span>

<p>####0x01. 前序遍历</p>
<ul>
<li>递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recursionPreorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        recursionPreorderTraversal(root.left);</span><br><span class="line">        recursionPreorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">// 用来暂存节点的栈</span></span><br><span class="line">    Stack&lt;TreeNode&gt; treeNodeStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="comment">// 游标节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span> &amp;&amp; !treeNodeStack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            treeNodeStack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!treeNodeStack.isEmpty())&#123;</span><br><span class="line">            node = treeNodeStack.pop();</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-中序遍历"><a href="#0x02-中序遍历" class="headerlink" title="0x02.中序遍历"></a>0x02.中序遍历</h4><ul>
<li>递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recursionMiddleorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">        recursionMiddleorderTraversal(root.left);</span><br><span class="line">        recursionMiddleorderTraversal(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        recursionMiddleorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">middleorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; treeNodeStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span> || !treeNodeStack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            treeNodeStack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!treeNOdeStack.isEmpty()) &#123;</span><br><span class="line">            node = treeNodeStack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-后序遍历"><a href="#0x03-后序遍历" class="headerlink" title="0x03. 后序遍历"></a>0x03. 后序遍历</h4><ul>
<li>递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recursionPostorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">        recursionPostorderTraversal(root.left);</span><br><span class="line">        recursionPostorderTraversal(root.right);</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>非递归的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; treeNodeStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">lastVisit</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span> || !treeNodeStack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            treeNodeStack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查看当前的元素</span></span><br><span class="line">        node = treeNodeStack.peek();</span><br><span class="line">        <span class="comment">// 如果右子树为空, 或者右子树已经访问, 则直接打印当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span> || node.right == lastVisit)&#123;</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            treeNodeStack.pop();</span><br><span class="line">            lastVisit = node;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 否则继续遍历右子树</span></span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 使用 Homebrew安装Docker</title>
    <url>/2018/07/29/%E4%BD%BF%E7%94%A8Homebrew%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<p>Homebrew 的Cask 已经支持 Docker for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br><span class="line">==&gt; Creating Caskroom at /usr/local/Caskroom</span><br><span class="line">==&gt; We&#x27;ll set permissions properly so we won&#x27;t need sudo in the future</span><br><span class="line">Password:          # 输入 macOS 密码</span><br><span class="line">==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://download.docker.com/mac/stable/21090/Docker.dmg</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Verifying checksum for Cask docker</span><br><span class="line">==&gt; Installing Cask docker</span><br><span class="line">==&gt; Moving App &#x27;Docker.app&#x27; to &#x27;/Applications/Docker.app&#x27;.</span><br><span class="line">&amp;#x1f37a;  docker was successfully installed!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注: 需要一点时间</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>brew</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令之Gitlow</title>
    <url>/2016/03/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8BGitFlow/</url>
    <content><![CDATA[<p>本文总结了git在工作中的一种成熟范式-git-flow, 对git-flow常规命令做了总结.</p>
<span id="more"></span>

<h4 id="git-flow-命令清单"><a href="#git-flow-命令清单" class="headerlink" title="git-flow 命令清单"></a>git-flow 命令清单</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git-flow 安装</span></span><br><span class="line">$ brew install git-flow-avh</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">$ git flow init</span><br><span class="line"><span class="comment"># 增加新功能</span></span><br><span class="line">$ git flow feature start &lt;功能名称&gt;</span><br><span class="line"><span class="comment"># 完成功能</span></span><br><span class="line">$ git flow feature finish &lt;功能名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布新特性(推送到远端)</span></span><br><span class="line">$ git flow feature publish &lt;功能名称&gt;</span><br><span class="line"><span class="comment"># 取一只发布的功能分支</span></span><br><span class="line">$ git flow feature pull origin &lt;功能名称&gt;</span><br><span class="line"><span class="comment"># 跟踪远端的功能分支</span></span><br><span class="line">$ git flow feature track &lt;功能名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备发布release版本</span></span><br><span class="line">$ git flow release start &lt;release_name&gt; [BASE]</span><br><span class="line"><span class="comment"># 推送到远端</span></span><br><span class="line">$ git flow release publish &lt;release_name&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以选择提供一个 <code>[BASE]</code>参数，即提交记录的 sha-1 hash 值，来开启动 release 分支. 这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的**</p>
</blockquote>
<ul>
<li>完成release的操作<ul>
<li>merge release分支到master</li>
<li>使用release分支名打Tag</li>
<li>merge release分支到develop</li>
<li>移除release分支</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow release finish &lt;release_name&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>紧急修复</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow hotfix start &lt;hotfix_name&gt; [BASENAME]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hotfix_name 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]为finish release时填写的版本号</p>
</blockquote>
<ul>
<li>完成紧急修复<ul>
<li>merge hotfix分支到master</li>
<li>使用hotfix分支名打Tag</li>
<li>merge hotfix分支到develop</li>
<li>移除hotfix分支</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow hotfix finish &lt;hotfix_name&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2018/06/29/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8BGit/</url>
    <content><![CDATA[<p>本文总结了常见的git使用命令,以及对日常开发过程中常用的操作进行了描述.</p>
<span id="more"></span>

<h4 id="0x01-网上翻出的命令分类"><a href="#0x01-网上翻出的命令分类" class="headerlink" title="0x01. 网上翻出的命令分类"></a>0x01. 网上翻出的命令分类</h4><ul>
<li>创建版本库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;url&gt;                  <span class="comment">#克隆远程版本库</span></span><br><span class="line">$ git init                         <span class="comment">#初始化本地版本库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改和提交</li>
</ul>
<!--more-->

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status                       <span class="comment">#查看状态</span></span><br><span class="line">$ git diff                         <span class="comment">#查看变更内容</span></span><br><span class="line">$ git add .                        <span class="comment">#跟踪所有改动过的文件</span></span><br><span class="line">$ git add &lt;file&gt;                   <span class="comment">#跟踪指定的文件</span></span><br><span class="line">$ git <span class="built_in">mv</span> &lt;old&gt;&lt;new&gt;                <span class="comment">#文件改名</span></span><br><span class="line">$ git <span class="built_in">rm</span>&lt;file&gt;                     <span class="comment">#删除文件</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached&lt;file&gt;            <span class="comment">#停止跟踪文件但不删除</span></span><br><span class="line">$ git commit -m <span class="string">&quot;commit messages&quot;</span>  <span class="comment">#提交所有更新过的文件</span></span><br><span class="line">$ git commit --amend               <span class="comment">#修改最后一次改动</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看历史提交</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span>                    <span class="comment">#查看提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> -p &lt;file&gt;          <span class="comment">#查看指定文件的提交历史</span></span><br><span class="line">$ git blame &lt;file&gt;           <span class="comment">#以列表方式查看指定文件的提交历史</span></span><br></pre></td></tr></table></figure>

<ul>
<li>撤销</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD      <span class="comment">#撤销工作目录中所有未提交文件的修改内容</span></span><br><span class="line">$ git checkout HEAD &lt;file&gt;   <span class="comment">#撤销指定的未提交文件的修改内容</span></span><br><span class="line">$ git revert &lt;commit&gt;        <span class="comment">#撤销指定的提交</span></span><br><span class="line">$ git <span class="built_in">log</span> --before=<span class="string">&quot;1 days&quot;</span>  <span class="comment">#退回到之前1天的版本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分支与标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt;  <span class="comment">#拉取并切换到指定的分支</span></span><br><span class="line">$ git branch                   <span class="comment">#显示所有本地分支</span></span><br><span class="line">$ git checkout &lt;branch/tag&gt;    <span class="comment">#切换到指定分支和标签</span></span><br><span class="line">$ git branch &lt;new-branch&gt;      <span class="comment">#创建新分支</span></span><br><span class="line">$ git branch -d &lt;branch&gt;       <span class="comment">#删除本地分支</span></span><br><span class="line">$ git tag                      <span class="comment">#列出所有本地标签</span></span><br><span class="line">$ git tag &lt;tagname&gt;            <span class="comment">#基于最新提交创建标签</span></span><br><span class="line">$ git tag -d &lt;tagname&gt;         <span class="comment">#删除标签</span></span><br></pre></td></tr></table></figure>

<ul>
<li>合并与衍合</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;        <span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">$ git rebase &lt;branch&gt;       <span class="comment">#衍合指定分支到当前分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>远程操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v                   <span class="comment">#查看远程版本库信息</span></span><br><span class="line">$ git remote show &lt;remote&gt;        <span class="comment">#查看指定远程版本库信息</span></span><br><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;   <span class="comment">#添加远程版本库</span></span><br><span class="line">$ git fetch &lt;remote&gt;              <span class="comment">#从远程库获取代码</span></span><br><span class="line">$ git pull &lt;remote&gt; &lt;branch&gt;      <span class="comment">#下载代码及快速合并</span></span><br><span class="line">$ git push &lt;remote&gt; &lt;branch&gt;      <span class="comment">#上传代码及快速合并</span></span><br><span class="line">$ git push &lt;remote&gt; :&lt;branch/tag-name&gt;  <span class="comment">#删除远程分支或标签</span></span><br><span class="line">$ git push --tags                       <span class="comment">#上传所有标签</span></span><br><span class="line"></span><br><span class="line">$ git fetch origin 远程分支:本地分支  <span class="comment"># 创建远程分支，但是不切换</span></span><br><span class="line"></span><br><span class="line">$ git pull origin &lt;remoteBranchName&gt;  <span class="comment"># 拉取远端分支内容到本地当前分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其他操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick [&lt;options&gt;] &lt;commit-ish&gt;</span><br><span class="line"><span class="comment"># 常用options:</span></span><br><span class="line">		<span class="comment"># 退出当前的chery-pick序列</span></span><br><span class="line">    --quit                </span><br><span class="line">    <span class="comment"># 继续当前的chery-pick序列</span></span><br><span class="line">    --<span class="built_in">continue</span>            </span><br><span class="line">    <span class="comment"># 取消当前的chery-pick序列，恢复当前分支</span></span><br><span class="line">    --abort               </span><br><span class="line">    <span class="comment"># 不自动提交</span></span><br><span class="line">    -n, --no-commit       </span><br><span class="line">    <span class="comment"># 编辑提交信息</span></span><br><span class="line">    -e, --edit            </span><br><span class="line">    </span><br><span class="line"><span class="comment"># cherry-pick 指定 commit，可同时传入多个 commit</span></span><br><span class="line">$ git cherry-pick &lt;commit_hash&gt;   </span><br><span class="line"><span class="comment"># 放弃 cherry-pick</span></span><br><span class="line">$ git cherry-pick --abort         </span><br><span class="line"><span class="comment"># cherry-pick 多个 commit 时，解决冲突后继续下次合并</span></span><br><span class="line">$ git cherry-pick --<span class="built_in">continue</span>      </span><br></pre></td></tr></table></figure>

<blockquote>
<p>cherry-pick 的多次提交</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 区间是在(], 即不包含commitID1</span></span><br><span class="line">$ git cherry-pick cmmitID1..cmmitID2</span><br><span class="line"><span class="comment"># 区间是在(]</span></span><br><span class="line">$ git cherry-pick cmmitID1^..cmmitID2</span><br></pre></td></tr></table></figure>

<h4 id="0x02-开发中的常用命令"><a href="#0x02-开发中的常用命令" class="headerlink" title="0x02. 开发中的常用命令"></a>0x02. 开发中的常用命令</h4><ul>
<li>提交推送</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加暂存文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add index.html</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加提交及提交信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;修改/新增内容注解&quot;</span></span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送至远程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br></pre></td></tr></table></figure>

<h4 id="0x03-储存工作区"><a href="#0x03-储存工作区" class="headerlink" title="0x03. 储存工作区"></a>0x03. 储存工作区</h4><p>概念: 当你想使现在当工作区保持在未修改前的状态时可以使用暂存功能，贮藏会把所有未提交的修改（包括暂存的和非暂存的）都保存起来.</p>
<p>应用场景:</p>
<p>当你想推送代码时，发现分支已有别人提交当代码(处于分支落后时)，可以先暂存代码然后再拉去最新当代码，代码拉取完成并且没有冲突时可以将贮藏区保存的内容应用到当前工作区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash</span>	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储工作区并添加备注内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash save <span class="string">&#x27;development&#x27;</span></span> 	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已贮藏区列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash list</span> 	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用最新贮藏的内容(应用后不删除该贮藏)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash apply</span>	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用最新贮藏的内容(应用后该贮藏的内容会被删除！)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash pop</span> 	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除最新贮藏的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash drop</span> 	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除所有的缓存</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash clear</span></span><br></pre></td></tr></table></figure>

<p>注意: 以下命令都可以指定操作任意一个已贮藏的内容，只需要在后面跟入stash@{1}索引，输入git stash list 查看索引</p>
<h4 id="0x04-回撤版本"><a href="#0x04-回撤版本" class="headerlink" title="0x04.回撤版本"></a>0x04.回撤版本</h4><p>应用场景:</p>
<blockquote>
<p>当不小心将错误当代码推送到远程仓库想要回撤并且不留下版本记录时</p>
</blockquote>
<p>GUI操作:</p>
<blockquote>
<p>选中要回撤到到版本，点击重置到这次提交，此时本地版本将会重置到该版本，并且落后于远程分支</p>
</blockquote>
<blockquote>
<p>最后使用命令行强制推送<code>git push --force origin master</code>，将本地代码强制覆盖到远程仓库</p>
</blockquote>
<p>命令行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将版本重置到634b64d版本，或者 git reset --soft HEAD^ 将版本重置到上一个版本，git reset --hard 634b64d 命令则不会保存之前提交到内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --soft 634b64d</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制覆盖远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --force origin master</span></span><br></pre></td></tr></table></figure>

<h4 id="0x05-回滚版本"><a href="#0x05-回滚版本" class="headerlink" title="0x05.回滚版本"></a>0x05.回滚版本</h4><p>应用场景:</p>
<ul>
<li>撤销指定文件到指定版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定文件的历史版本</span></span><br><span class="line">git log &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回滚到指定commitID</span></span><br><span class="line">git checkout &lt;commitID&gt; &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>回滚最后一次提交</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前Head指针指向当前分支的最新节点</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert HEAD</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送到远端</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin &lt;branch&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>回滚到某次的提交</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到要回滚的commitID</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回滚</span></span><br><span class="line">git revert commitID</span><br></pre></td></tr></table></figure>

<h4 id="0x06-打标签"><a href="#0x06-打标签" class="headerlink" title="0x06.打标签"></a>0x06.打标签</h4><p>标签的作用, 可以用来标记版本信息, 标记特殊的提交记录等. 下面是关于标签的常用命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已有的标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag</span> </span><br><span class="line">****操作本地仓库标签******</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为最新的提交记录创建名为<span class="string">&#x27;v1.0.0&#x27;</span>的标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag v1.0.0</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为版本号1452113的提交记录创建名为<span class="string">&#x27;v1.0.0&#x27;</span>的标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag v1.0.0 1452113</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地仓库名为<span class="string">&#x27;v1.0.0&#x27;</span>的标签</span></span><br><span class="line">git tag -d v1.0.0 </span><br><span class="line">****操作远程仓库标签******</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将名为<span class="string">&#x27;v1.0.0&#x27;</span>的标签推送到远程仓库</span></span><br><span class="line">git push origin v1.0.0  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程仓库里名为<span class="string">&#x27;v1.0.0&#x27;</span>的标签</span></span><br><span class="line">git push origin :refs/tags/v1.0.0  </span><br></pre></td></tr></table></figure>

<h4 id="0x07-新分支"><a href="#0x07-新分支" class="headerlink" title="0x07.新分支"></a>0x07.新分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前分支基础上，以最新版本创建名为<span class="string">&#x27;dev&#x27;</span>的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以<span class="string">&#x27;d519940&#x27;</span>版本记录，创建名为<span class="string">&#x27;dev&#x27;</span>的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev d519940</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到<span class="string">&#x27;dev&#x27;</span>分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout dev</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换到<span class="string">&#x27;dev&#x27;</span>分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b dev</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除<span class="string">&#x27;dev&#x27;</span>分支(删除分支时不能处于所要被删除的分支上)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d dev</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除<span class="string">&#x27;dev&#x27;</span>分支(分支还没有被合并时需要强行删除，强行删除后将丢失已修改的内容)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -D dev</span>  </span><br><span class="line">******操作远程仓库********</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地分支<span class="string">&#x27;dev&#x27;</span>推送到远程仓库命名为<span class="string">&#x27;dev&#x27;</span>，(本地分支名:远程分支名)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin dev:dev</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程<span class="string">&#x27;dev&#x27;</span>分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --delete origin dev</span>  </span><br></pre></td></tr></table></figure>

<h4 id="0x08-合并分支"><a href="#0x08-合并分支" class="headerlink" title="0x08.合并分支"></a>0x08.合并分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换至master分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并de分支至master分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge de</span> </span><br></pre></td></tr></table></figure>

<h4 id="0x09-查看修改记录"><a href="#0x09-查看修改记录" class="headerlink" title="0x09.查看修改记录"></a>0x09.查看修改记录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看&#x27;index.html&#x27;文件所有的提交信息记录</span></span><br><span class="line">$ git <span class="built_in">log</span> index.html  </span><br><span class="line"><span class="comment"># 查看&#x27;index.html&#x27;文件所有的提交修改内容</span></span><br><span class="line">$ git <span class="built_in">log</span> -p index.html  </span><br><span class="line"><span class="comment"># 查看最近三次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline -3</span><br></pre></td></tr></table></figure>

<h4 id="0x0A-git远程仓库的迁移"><a href="#0x0A-git远程仓库的迁移" class="headerlink" title="0x0A. git远程仓库的迁移"></a>0x0A. git远程仓库的迁移</h4><ul>
<li>在代码托管服上创建一个空项目, 假装仓库地址是:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git@xxx.xxx.xx.xx:&lt;groupName&gt;/&lt;projectName&gt;.git</span><br></pre></td></tr></table></figure></li>
<li>将远程仓库克隆一份到本地<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">$ git clone &lt;git/http&gt;xxx.git </span><br></pre></td></tr></table></figure></li>
<li>在Gitlab或者其他托管平台删除远程仓库(保不保留按照实际情况走就行了)</li>
<li>删除本地仓库的远端<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure></li>
<li>将本地仓库关联到最新的远端地址<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@xxx.xxx.xx.xx:&lt;groupName&gt;/&lt;projectName&gt;.git</span><br></pre></td></tr></table></figure></li>
<li>将本地记录推送到远端<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></li>
</ul>
<p>(完)</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的LLDB指令</title>
    <url>/2016/07/26/%E5%B8%B8%E7%94%A8%E7%9A%84LLDB%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>本文总结了在日常开发过程中的常用的LLDB指令，记到这里，方便查阅。</p>
<span id="more"></span>

<p>print 指令：可以打印出一个值，常常简写成p，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10</span><br><span class="line"></span><br><span class="line">// lldb中</span><br><span class="line">print a</span><br><span class="line">// 或者</span><br><span class="line">p a</span><br></pre></td></tr></table></figure>

<p>print object 指令：打印对象， 常常简写成po， 如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">NSObject *obj = [[NSObject alloc] init];</span><br><span class="line"></span><br><span class="line">// lldb</span><br><span class="line"></span><br><span class="line">po obj</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>读取内存</p>
<p>格式<code>memory read/&#123;数量&#125;&#123;格式&#125;&#123;字节数&#125; 内存地址</code>，其中memory read 可以简写成x, 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 0x0100010</span><br></pre></td></tr></table></figure>

<p>修改内存中的值<br>格式 <code>memeory write 内存地址 数值</code>，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memeory write 0x0000019 10</span><br></pre></td></tr></table></figure>

<p>补充：</p>
<ul>
<li>格式<ul>
<li>x是16进制</li>
<li>f是浮点</li>
<li>d是10进制</li>
</ul>
</li>
<li>字节大小<ul>
<li>b是指byte表示1个字节</li>
<li>h是half word 表示2个字节</li>
<li>w是word表示4个字节</li>
<li>g是giant word表示8个字节</li>
</ul>
</li>
</ul>
<p>综合使用：打印x010010地址中存储的数据，4个字节为一组打印3组以16进制的形式展示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/3xw 0x100010</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>lldb</category>
      </categories>
      <tags>
        <tag>lldb</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2015/10/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>本文讲述排序算法, 分别分为插入排序、交换排序、选择排序、堆排序几种算法, 分别用java进行详细的描述.</p>
<span id="more"></span>

<h4 id="0x01-插入排序"><a href="#0x01-插入排序" class="headerlink" title="0x01.插入排序"></a>0x01.插入排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionSort</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;原数组:&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        <span class="comment">// insertionSort3(arr);</span></span><br><span class="line">        shellsort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序之后的:&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">		<span class="comment">// 希尔排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] shellsort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr.length/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(number &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = number; i &lt; arr.length; i++) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                j = i - number;</span><br><span class="line">                <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">                    arr[j+number] = arr[j];</span><br><span class="line">                    j = j-number;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j+number] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            number = number/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 第三种实现方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionsort3(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">focus</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; focus; j--) &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = focus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第二种实现方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionsort2(<span class="type">int</span>[] arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">focus</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; focus)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>] = focus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">       1, 3 , 2, 8, 6, 7</span></span><br><span class="line"><span class="comment">       第一圈 base = 132867 focus=3</span></span><br><span class="line"><span class="comment">            132867</span></span><br><span class="line"><span class="comment">       第二圈 base = 132867 focus=2</span></span><br><span class="line"><span class="comment">            123867</span></span><br><span class="line"><span class="comment">            123867</span></span><br><span class="line"><span class="comment">       第三圈 base = 123867 focus=8</span></span><br><span class="line"><span class="comment">            123867</span></span><br><span class="line"><span class="comment">            123867</span></span><br><span class="line"><span class="comment">            123867</span></span><br><span class="line"><span class="comment">       第四圈 base = 123867 focus=6</span></span><br><span class="line"><span class="comment">            123687</span></span><br><span class="line"><span class="comment">            123687</span></span><br><span class="line"><span class="comment">            123687</span></span><br><span class="line"><span class="comment">            123687</span></span><br><span class="line"><span class="comment">       第五圈 base = 123687 focus=7</span></span><br><span class="line"><span class="comment">            123678</span></span><br><span class="line"><span class="comment">            123678</span></span><br><span class="line"><span class="comment">            123678</span></span><br><span class="line"><span class="comment">            123678</span></span><br><span class="line"><span class="comment">            123678</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionsort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                    swapElement(arr, j, j-<span class="number">1</span>);               </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] swapElement(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j) &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x != arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x] + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-交换排序"><a href="#0x02-交换排序" class="headerlink" title="0x02.交换排序"></a>0x02.交换排序</h4><h5 id="0x0201-冒泡排序"><a href="#0x0201-冒泡排序" class="headerlink" title="0x0201.冒泡排序"></a>0x0201.冒泡排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">149</span>,<span class="number">138</span>,<span class="number">165</span>,<span class="number">197</span>,<span class="number">176</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">114</span>,<span class="number">110</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  	<span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="0x0202-快速排序"><a href="#0x0202-快速排序" class="headerlink" title="0x0202.快速排序"></a>0x0202.快速排序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        quickSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       recurPartiton(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recurPartiton</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start,<span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end-start&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">part</span> <span class="operator">=</span> partArr(arr, start, end);</span><br><span class="line">        <span class="comment">// 分三种情况继续拆分</span></span><br><span class="line">        <span class="keyword">if</span> (part == start) &#123;</span><br><span class="line">             recurPartiton(arr, part+<span class="number">1</span>, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(part == end) &#123;</span><br><span class="line">            recurPartiton(arr, start, end-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            recurPartiton(arr, start, part-<span class="number">1</span>);</span><br><span class="line">            recurPartiton(arr, part+<span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partArr</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> arr[end];</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; base) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != n)&#123;</span><br><span class="line">                    exchangeE(arr, i, n);</span><br><span class="line">                &#125;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchangeE(arr, n, end);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  	<span class="comment">// 工具</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exchangeE</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index1, <span class="type">int</span> index2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-选择排序"><a href="#0x03-选择排序" class="headerlink" title="0x03. 选择排序"></a>0x03. 选择排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = &#123;<span class="number">13</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">60</span>, <span class="number">39</span>, <span class="number">12</span>, <span class="number">109</span>, <span class="number">56</span>, <span class="number">72</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> a[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(min &gt; a[j]) &#123;</span><br><span class="line">                    min = a[j];</span><br><span class="line">                    a[j] = a[i];</span><br><span class="line">                    a[i] = min;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0x04-堆排序"><a href="#0x04-堆排序" class="headerlink" title="0x04.堆排序"></a>0x04.堆排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.构造一个大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length/<span class="number">2</span>-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            adjustHeap(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.调整对结构+交换对顶元素与末尾元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>,j);</span><br><span class="line">            adjustHeap(arr,<span class="number">0</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>*i+<span class="number">1</span>; k &lt; length; k=k*<span class="number">2</span>+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(k+<span class="number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] &gt; temp) &#123;</span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                i = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>查找算法</title>
    <url>/2015/10/26/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>本文使用java语法实现了对查找算法的表述,采用递归和非递归两种方式.</p>
<span id="more"></span>

<p>####0x01.二分查找法</p>
<h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">binarySearchRecursive</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRecursive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> hkey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &gt; hkey)&#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearchRecursive(arr, start, mid-<span class="number">1</span>,hkey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; hkey)&#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearchRecursive(arr, mid+<span class="number">1</span>, end,hkey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> binarySearchRecursive(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####非递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">binarySearchNoneRecursive</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> binarySearch(arr, <span class="number">0</span>, arr.length, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> hkey)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; hkey)&#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; hkey) &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>日常零零碎</title>
    <url>/2020/07/04/%E6%97%A5%E5%B8%B8%E9%9B%B6%E9%9B%B6%E7%A2%8E/</url>
    <content><![CDATA[<p>一. 打开<strong>Mac OSX</strong>原生的读写<strong>NTFS</strong>功能 </p>
<p>插上磁盘打开终端, 输入一下命令:</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br><span class="line">sudo nano /etc/fstab</span><br><span class="line">LABEL=Elements none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /Volumes/lj ~/Desktop/lj</span><br></pre></td></tr></table></figure>

<p>二. 打开允许所有来源: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo spctl --master-enable</span><br></pre></td></tr></table></figure>

<p>三. Mac 隐显文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示隐藏文件</span></span><br><span class="line">$ defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder</span><br><span class="line"><span class="comment"># 不显示隐藏文件</span></span><br><span class="line">$ defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>

<p>四. chisel使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install chisel</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> .lldbinit </span><br><span class="line">$ open .lldbinit </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ~/.lldbinit</span><br><span class="line">...</span><br><span class="line">command script import /usr/local/opt/chisel/libexec/fblldb.py</span><br></pre></td></tr></table></figure>

<p>or </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ~/.lldbinit</span><br><span class="line">...</span><br><span class="line">command script import /path/to/fblldb.py</span><br></pre></td></tr></table></figure>

<p>五. 打印Model</p>
<ol>
<li>创建一个BaseModel</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (NSString *)debugDescription</span><br><span class="line">&#123;</span><br><span class="line">    //声明一个字典</span><br><span class="line">    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];</span><br><span class="line">    </span><br><span class="line">    //得到当前class的所有属性</span><br><span class="line">    uint count;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList([self class], &amp;count);</span><br><span class="line">    </span><br><span class="line">    //循环并用KVC得到每个属性的值</span><br><span class="line">    for (int i = 0; i&lt;count; i++) &#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        NSString *name = @(property_getName(property));</span><br><span class="line">        id value = [self valueForKey:name]?:@&quot;nil&quot;;//默认值为nil字符串</span><br><span class="line">        [dictionary setObject:value forKey:name];//装载到字典里</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //释放</span><br><span class="line">    free(properties);</span><br><span class="line">    </span><br><span class="line">    NSString *desc = [NSString stringWithFormat:@&quot;&lt;%@-%p&gt; -- %@&quot;,[self class],self,dictionary];</span><br><span class="line">    desc = [NSString stringWithCString:[desc cStringUsingEncoding:NSUTF8StringEncoding] encoding:NSNonLossyASCIIStringEncoding];</span><br><span class="line">    return desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>目标model</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (NSString *)description</span><br><span class="line">&#123;</span><br><span class="line">    return [super debugDescription];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打印</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-26</span> <span class="number">00</span>:<span class="number">18</span>:<span class="number">44.008746</span>+<span class="number">0800</span> DebugDescriptionDemo[<span class="number">6390</span>:<span class="number">45917</span>] &lt;TestModel<span class="number">-0x100506560</span>&gt; -- &#123;</span><br><span class="line">    index = <span class="number">1</span>;</span><br><span class="line">    text = <span class="string">&quot;降龙十八掌&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Program ended with exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>六. edgesForExtendedLayout的使用</p>
<p>视图顶部高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property(nonatomic, assign) UIRectEdge edgesForExtendedLayout;</span><br><span class="line">Description	</span><br><span class="line">The edges that you extend for your view controller.</span><br><span class="line">Instead of this property, use the safe area of your view to determine which parts of your interface are occluded by other content. For more information, see the safeAreaLayoutGuide and safeAreaInsets properties of UIView.</span><br><span class="line">In iOS 10 and earlier, use this property to report which edges of your view controller extend underneath navigation bars or other system-provided views. The default value of this property is UIRectEdgeAll, and it is recommended that you do not change that value.</span><br><span class="line">If you remove an edge value from this property, the system does not lay out your content underneath other bars on that same edge. In addition, the system provides a default background so that translucent bars have an appropriate appearance. The window’s root view controller does not react to this property.</span><br><span class="line">SDKs	iOS 7.0+, tvOS 9.0+</span><br></pre></td></tr></table></figure>

<p>七. Mac无法上网, 清除网络配置文件</p>
<ol>
<li><p>打开一下路劲</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">/资源库/Preferences/SystemConfiguration/</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">com.apple.airport.preferences.plist</span><br><span class="line">com.apple.network.identification.plist</span><br><span class="line">NetworkInterfaces.plist</span><br><span class="line">preferences.plist</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空废纸篓</p>
</li>
<li><p>重启</p>
</li>
</ol>
<p>八. Mac U盘装系统</p>
<ol>
<li><p>打开App Store 下载系统(以EI Capition为例)</p>
</li>
<li><p>插入U盘并且更改U盘名称(123为例)</p>
</li>
<li><p>打开终端输入</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/123 --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /Applications/macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/123 --applicationpath /Applications/macOS\ High\ Sierra.app</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>输入管理员密码</p>
</li>
<li><p>输入y</p>
</li>
<li><p>最后等待,启动盘制作成功</p>
</li>
<li><p>重启,按住Option不松手,启动之后看到U盘，点击继续，点击“磁盘工具”抹掉全部的磁盘 （**一定要记得合并成1个分区，有多个分区是无法安装成功的）然后关闭，回到实用工具的界面，点击“重新安装OS X”覆盖掉目前的磁盘就可以。</p>
</li>
<li><p>如果有卡在最后一秒的界面，也别急，最长可能也需要30分钟。就接着电源放着等待就可以了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-中介者模式</title>
    <url>/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>用一个中介对象（中介者）来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>
<p>角色：</p>
<ul>
<li>Mediator</li>
<li>ConcrateMediator</li>
<li>Member</li>
<li>ConcrateMember</li>
</ul>
<span id="more"></span>
<p>类图：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi0rmw1sklj30kw0b0glo.jpg"></p>
<p>实例:<br>新增一个聊天室成员只需要新建一个成员实例，然后再在聊天室中介者那注册就可以加入聊天室了。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聊天中介</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ChatMediator</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)registerChatMember:(ChatMember *)chatMember;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)forwardMessage:(<span class="built_in">NSString</span> *)message fromMember:(ChatMember *)fromMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ChatMediator</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *memberList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">static</span> <span class="type">id</span> instance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [ChatMediator new];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _memberList = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)registerChatMember:(ChatMember *)chatMember</span><br><span class="line">&#123;</span><br><span class="line">    [_chatMember addObject:chatMember];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)forwardMessage:(<span class="built_in">NSString</span> *)message fromMember:(ChatMember *)fromMember</span><br><span class="line">&#123;</span><br><span class="line">    [_memberList enumerateObjectUsingBlock:^(<span class="type">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> *stop)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj != fromMember)</span><br><span class="line">        &#123;</span><br><span class="line">            [member receiveMessage:message fromMember:member];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ChatMember</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *userName;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)sendMessage:(<span class="built_in">NSString</span> *)message;</span><br><span class="line">- (<span class="type">void</span>)receiveMessage:(<span class="built_in">NSString</span> *)message fromMember:(ChatMember *)fromMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ChatMember</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)sendMessage:(<span class="built_in">NSString</span> *)message</span><br><span class="line">&#123;</span><br><span class="line">    [[ChatMediator shared] forwardMessage:message fromMember:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)receiveMessage:(<span class="built_in">NSString</span> *)message fromMember:(ChatMember *)fromMember</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@-----%@------%@&quot;</span>,_userName,message,fromMember.userName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>我们可以这样使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ChatMediator *mediator = [ChatMediator shared];</span><br><span class="line">ChatMember *a = [ChatMember new];</span><br><span class="line">ChatMember *b = [ChatMember new];</span><br><span class="line">ChatMember *c = [ChatMember new];</span><br><span class="line"></span><br><span class="line">[mediator registerMember:a];</span><br><span class="line">[mediator registerMember:b];</span><br><span class="line">[mediator registerMember:c];</span><br><span class="line"></span><br><span class="line">a.userName = <span class="string">@&quot;a&quot;</span>;</span><br><span class="line">b.userName = <span class="string">@&quot;b&quot;</span>;</span><br><span class="line">c.userName = <span class="string">@&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line">[a sendMessage:<span class="string">@&quot;aaaaaaaaaaaaaaa&quot;</span>];</span><br><span class="line">[b sendMessage:<span class="string">@&quot;bbbbbbbbbbbbbbb&quot;</span>];</span><br><span class="line">[c sendMessage:<span class="string">@&quot;ccccccccccccccc&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>中介者模式简化了对象之间的交互，它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护和扩展，将原本难以理解的网状结构转换成相对简单的星型结构。</li>
<li>中介者模式可将各同事对象解耦。中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好地符合“开闭原则”。</li>
<li>以减少子类生成，中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使各个同事类可被重用，无须对同事类进行扩展。</li>
</ul>
<p>缺点:</p>
<ul>
<li>在具体中介者类中包含了大量同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>
</ul>
<p>实操：</p>
<ul>
<li>在层级结构比较复杂的GUI中，我们可以构建一个Mediator用于层级之间的行为和数据传递，减少层级之间的互相了解。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:单例模式确保一个类有且仅有一个实例, 并提供一个访问这个实例的全局访问点</p>
<span id="more"></span>

<p>例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；</p>
<p>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。</p>
<p>一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Singleton</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">id</span> instance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[Singleton alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)doSomething</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="built_in">NSLog</span>(<span class="string">&quot;just test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>对应的结构图如下</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5saz78luj3080086t8m.jpg">

<p>优点:</p>
<ul>
<li>对创建过程能严格控制</li>
<li>节约系统资源</li>
</ul>
<p>缺点:</p>
<ul>
<li>扩展性差</li>
<li>滥用容易造成职责过重</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Creational Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-命令模式</title>
    <url>/2018/04/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义: 把一个请求封装为一个对象,从而让我们可用不同的请求对客户端进行参数化;以及支持可撤销的操作.将发出命令的责任和执行命令的责任分割.</p>
<span id="more"></span>

<p>实例:<br>例如:遥控器是一个调用者,不同的按钮代表不同的命令,而电视是接受者.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Command</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) SEL sel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *target;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)execute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Command</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)execute</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.target perfromSelector:_sel withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用者</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Controller</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">- (<span class="type">void</span>)invokeCommand:(Command *)command;</span><br><span class="line"><span class="comment">// 取消命令</span></span><br><span class="line">- (<span class="type">void</span>)cancelCommand:(Command *)command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Controller</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)invokeCommand:(Command *)command</span><br><span class="line">&#123;</span><br><span class="line">    [command excute];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)cancelCommand:(Command *)command</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 电视机</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TV</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)turnOn;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)turnOff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TV</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)turnOn</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;打开电视机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)turnOff</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;关闭电视机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">TV *tv = [TV new];</span><br><span class="line"></span><br><span class="line">Command *one = [Command new];</span><br><span class="line">one.sel = <span class="keyword">@selector</span>(turnOn):</span><br><span class="line">one.target = tv;</span><br><span class="line"></span><br><span class="line">Command *two = [Command new];</span><br><span class="line">two.sel = <span class="keyword">@selector</span>(turnOn):</span><br><span class="line">two.target = tv;</span><br><span class="line"></span><br><span class="line">Controller *controller = [Controller new];</span><br><span class="line"></span><br><span class="line">[controller invokCommand:one];</span><br><span class="line">[controller invokCommand:two];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类图:(这里的图和实现有些差别, 实现上通过Target-Action对具体类进行了简化), 完整类图如下:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghltd08oq2j30ji0c3weh.jpg">

<p>优点:</p>
<ul>
<li>降低系统的耦合度。</li>
<li>新的命令可以很容易地加入到系统中。</li>
<li>以比较容易地设计一个命令队列和宏命令（组合命令）。</li>
</ul>
<p>缺点:</p>
<ul>
<li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。</li>
</ul>
<p>总结:<br>命令模式的组合使用,可以将复杂的业务进行逐个的拆分</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂方法模式</title>
    <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>工厂方法模式,工厂的父类负责定义创建产品对象的公共接口,而工厂子类则负责生成具体的产品对象,即通过不同的工厂子类创建不同的产品对象.</p>
<span id="more"></span>

<p>角色：</p>
<ul>
<li>Product：抽象产品</li>
<li>ConcreteProduct：具体产品</li>
<li>Factory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
</ul>
<p>举例:工厂方法是对工厂进行抽象化,即有一个抽象的工厂类负责定义具体的工厂创建方法.如:富士康不在是一个代工厂, 而是一个抽象的工厂,这个抽象的工厂衍生出两个具体的工厂,一个富士康iPhone生产厂,一个富士康miPhone生产厂,iPhone厂负责生产iPhone,miPhone厂负责生产miPhone.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 工厂抽象类</span><br><span class="line">@interface Factory : NSObject</span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Factory </span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    // 返回抽象的Phone并无意义,因此返回nil</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// iPhone工厂</span><br><span class="line">@interface iPhoneFactory : Factory</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation iPhoneFactory</span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    return [iPhone new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// miPhone工厂</span><br><span class="line">@interface miPhoneFactory : Factory</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation miPhoneFactory</span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    return [miPhoneFactory new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建苹果手机对象</span><br><span class="line">Phone *phone = [iPhoneFactory createPhone];</span><br><span class="line">// 创建小米手机对象</span><br><span class="line">Phone *mi = [miPhoneFactory createPhone];</span><br></pre></td></tr></table></figure>

<p>对应的结构图如下:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5n95y8p9j30ny0afglj.jpg">

<p>优点:</p>
<ul>
<li>屏蔽了产品创建的具体细节,用户只需要关心所需产品对应的工厂即可</li>
<li>当有新的产品时,无需修改抽象工厂的方法,只需要添加一个具体的工厂和具体的产品即可,符合开闭原则</li>
</ul>
<p>缺点:</p>
<ul>
<li>当系统加入新产品时,需要提供对象的产品类和具体的工厂, 增加了类的个数</li>
</ul>
<p>总结:</p>
<ul>
<li>工厂方法解决了简单工厂开闭原则的问题, 另外突出一个动态, 动态仔细品.</li>
</ul>
<p>(完)</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Creational Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-抽象工厂</title>
    <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p>
<p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p>
<blockquote>
<p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p>
<ul>
<li><strong>产品等级结构</strong> ：产品等级结构即产品的继承结构，如一个抽象类是手机，其子类有小米手机、苹果手机、华为手机，则抽象手机与具体品牌的手机之间构成了一个产品等级结构，抽象手机是父类，而具体品牌的手机是其子类。</li>
<li><strong>产品族</strong> ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如小米工厂生产的小米手机、小米充电器，小米手机位于手机产品等级结构中，小米充电器位于充电器产品等级结构中。</li>
</ul>
</blockquote>
<span id="more"></span>

<p>角色：</p>
<ul>
<li>AbstractFactory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
<li>AbstractProduct：抽象产品</li>
<li>Product：具体产品</li>
</ul>
<p>实例:<br>抽象工厂和工厂方法的不同在于,工厂方法只用于处理一类产品,不涉及产品及其关联品,抽象工厂抽象了产品及其关联品的创建, 如:iPhone的生产不仅需要iPhone的手机,还有与之配套的充电器,那么iPhone工厂则需要具备生产充电器等功能,同理小米工厂.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机抽象类和子类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Phone</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">miPhone</span> : <span class="title">Phone</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">iPhone</span> : <span class="title">Phone</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 充电器的抽象类和派生类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Charger</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">iPhoneCharger</span> : <span class="title">Charger</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">miPhoneCharger</span> : <span class="title">Charger</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Factory</span></span></span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Charger *)createCharger</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iPhone主题工厂</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">iPhoneFactory</span></span></span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [iPhone new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Charger *)createCharger</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [iPhoneCharger new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// miPhone主题工厂</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">miPhoneFactory</span></span></span><br><span class="line"></span><br><span class="line">+ (Phone *)createPhone</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [miPhone new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Charger *)createCharger</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [miPhoneCharger new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iPhone主题生产</span></span><br><span class="line">Phone *phone = [iPhoneFactory createPhone];</span><br><span class="line">Charger *charger = [iPhoneFactory createCharger];</span><br><span class="line"></span><br><span class="line"><span class="comment">// miPhone主题生产</span></span><br><span class="line">Phone *phone = [miPhoneFactory createPhone];</span><br><span class="line">Charger *charger = [iPhoneFactory createCharger];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对应的结构图</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5oxtz8qyj30p40fvglq.jpg">



<p>优点:</p>
<ul>
<li>封装了一些类相关产品的创建过程,无需关心具体的产品类</li>
<li>分离了关联品之间的创建过程,在产品和关联产品工作时,能保证从属同一产品簇</li>
</ul>
<p>缺点:</p>
<ul>
<li>产品簇中扩展新产品困难,需要修改抽象工厂接口</li>
</ul>
<p>使用场景</p>
<p>系统中有多于一个的产品族，而每次只使用其中某一产品族。例如: 在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。(摘)</p>
<p>总结:<br>抽象工厂是工厂方法的复杂版, 引入了产品族</p>
<p>(完)</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Creational Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-状态模式</title>
    <url>/2018/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。</p>
<span id="more"></span>

<p>实例:状态模式用于解决复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，所以对象在不同状态下具有不同行为时可以使用状态模式。状态模式将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化。例如:根据存钱余额来自动设置账户的状态，银行账户在不同状态下，进行存钱、取钱和借钱的行为。在不同状态下，这些行为得到的回复也不一样，比如说没有余额时无法取钱，只能借钱。</p>
<p>角色：</p>
<ul>
<li>Context: 环境类</li>
<li>State: 抽象状态类</li>
<li>ConcreteState: 具体状态类</li>
</ul>
<p>对应类图:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghyhos4wd4j30ji07nmx4.jpg">

<p>实例:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">State</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)saveMoney:(<span class="built_in">CGFloat</span>)money;</span><br><span class="line">- (<span class="type">BOOL</span>)drawMoney:(<span class="built_in">CGFloat</span>)money;</span><br><span class="line">- (<span class="type">BOOL</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Satate</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)saveMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">BOOL</span>)drawMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">BOOL</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Concreate State</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存款富余状态</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RichState</span> : <span class="title">State</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RichState</span></span></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)saveMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎存钱 %.2f&quot;</span>, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)drawMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎取钱 %.2f&quot;</span>, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;您还有余额，请先花完余额&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 零存款零负债状态</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZeroState</span> : <span class="title">State</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZeroState</span></span></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)saveMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎存钱 %.2f&quot;</span>, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)drawMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;您当前没有余额&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎借钱 %.2f&quot;</span>, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 负债状态</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DebtState</span> : <span class="title">State</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DebtState</span></span></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)saveMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎还钱 %.2f&quot;</span>, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)drawMoney:(<span class="built_in">CGFloat</span>)money </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;您当前没有余额&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借钱</span></span><br><span class="line">- (<span class="type">BOOL</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;上次欠的账还没有还清，暂时无法借钱&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>账户类</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 银行账户类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Account</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line">- (<span class="type">void</span>)saveMoney:(<span class="type">float</span>)money;</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line">- (<span class="type">void</span>)drawMoney:(<span class="type">float</span>)money;</span><br><span class="line"><span class="comment">// 借钱</span></span><br><span class="line">- (<span class="type">void</span>)borrowMoney:(<span class="type">float</span>)money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Account</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> money; <span class="comment">// 余额</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) State *state; <span class="comment">// 账户状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Account</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化账户</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        _money = <span class="number">0</span>;</span><br><span class="line">        _state = [ZeroState new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line">- (<span class="type">void</span>)saveMoney:(<span class="built_in">CGFloat</span>)money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([_state saveMoney:money]) </span><br><span class="line">    &#123;</span><br><span class="line">        _money += money;</span><br><span class="line">        [<span class="keyword">self</span> updateState];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;余额：%.2f&quot;</span>, _money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line">- (<span class="type">void</span>)drawMoney:(<span class="built_in">CGFloat</span>)money </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([_state drawMoney:money])</span><br><span class="line">    &#123;</span><br><span class="line">        _money -= money;</span><br><span class="line">        [<span class="keyword">self</span> updateState];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;余额：%.2f&quot;</span>, _money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借钱</span></span><br><span class="line">- (<span class="type">void</span>)borrowMoney:(<span class="built_in">CGFloat</span>)money </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([_state borrowMoney:money])</span><br><span class="line">    &#123;</span><br><span class="line">        _money -= money;</span><br><span class="line">        [<span class="keyword">self</span> updateState];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;余额：%.2f&quot;</span>, _money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新账户状态</span></span><br><span class="line">- (<span class="type">void</span>)updateState</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_money &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _state = [RichState new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_money == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _state = [ZeroState new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _state = [DebtState new];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化银行账户</span></span><br><span class="line">Account *bankAccount = [Account new];</span><br><span class="line"><span class="comment">// 取 50</span></span><br><span class="line">[bankAccount drawMoney:<span class="number">50</span>]; <span class="comment">// 余额：0 您当前没有余额</span></span><br><span class="line"><span class="comment">// 存 100</span></span><br><span class="line">[bankAccount saveMoney:<span class="number">100</span>]; <span class="comment">// 余额：0 欢迎存钱 100.00</span></span><br><span class="line"><span class="comment">// 借 100</span></span><br><span class="line">[bankAccount borrowMoney:<span class="number">100</span>]; <span class="comment">// 余额：100 您还有余额，请先花完余额</span></span><br><span class="line"><span class="comment">// 取 100</span></span><br><span class="line">[bankAccount drawMoney:<span class="number">100</span>]; <span class="comment">// 余额：100 欢迎取钱 100.00</span></span><br><span class="line"><span class="comment">// 借 100</span></span><br><span class="line">[bankAccount borrowMoney:<span class="number">100</span>]; <span class="comment">// 余额：0 欢迎借钱 100.00</span></span><br><span class="line"><span class="comment">// 借 50</span></span><br><span class="line">[bankAccount borrowMoney:<span class="number">50</span>]; <span class="comment">// 余额：-100 上次欠的账还没有还清，暂时无法借钱</span></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>封装了状态的转换规则，在状态模式中可以将状态的转换代码封装在环境类或者具体状态类中，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中。</li>
<li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。</li>
<li>允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。</li>
<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>
</ul>
<p>缺点:</p>
<ul>
<li>状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。</li>
<li>因为新增或者删除一个状态需要修改相关的状态类，所以不符合开闭原则。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-生成器模式(建造者模式)</title>
    <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F(%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F)/</url>
    <content><![CDATA[<p>动机:建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。</p>
<p>定义: 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。</p>
<span id="more"></span>

<p>角色：</p>
<ul>
<li>Builder：抽象建造者</li>
<li>ConcreteBuilder：具体建造者</li>
<li>Director：指挥者</li>
<li>Product：产品角色</li>
</ul>
<p>实例:</p>
<p>生成器模式将复杂的创建逻辑进行分割. 如:生产汽车,分布安装生产不同的零部件.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象汽车生成器</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CarBuilder</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)createNewCar;</span><br><span class="line">- (Car *)getCar;</span><br><span class="line"><span class="comment">// 建造过程</span></span><br><span class="line">- (<span class="type">void</span>)buildWheels;</span><br><span class="line">- (<span class="type">void</span>)buildEngine;</span><br><span class="line">- (<span class="type">void</span>)buildBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CarBuilder</span> </span></span><br><span class="line">&#123;</span><br><span class="line">    Car *_car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)createNewCar</span><br><span class="line">&#123;</span><br><span class="line">    _car = [Car new];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Car *)getCar</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大众车生成器</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">VolkswagenCarBuilder</span> : <span class="title">CarBuilder</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">VolkswagenCarBuilder</span></span></span><br><span class="line"><span class="comment">// 实现基类中的三个方法,配置大众车应该有的轮子机器和车身</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 奔驰车生成器</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BenzCarBuilder</span> : <span class="title">CarBuilder</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BenzCarBuilder</span></span></span><br><span class="line"><span class="comment">// 实现基类中的三个方法,配置奔驰车应该有的轮子机器和车身</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产商</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Productor</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setCarBuilder:(CarBuilder *)carBuilder;</span><br><span class="line">- (<span class="type">void</span>)constructCar;</span><br><span class="line">- (Car *)getCar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Productor</span></span></span><br><span class="line">&#123;</span><br><span class="line">    CarBuilder *_carBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setCarBuilder:(CarBuilder *)carBuilder</span><br><span class="line">&#123;</span><br><span class="line">    _carBuilder = carBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)constructCar</span><br><span class="line">&#123;</span><br><span class="line">    [_carBuilder createNewCar];</span><br><span class="line">    [_carBuilder buildWhells];</span><br><span class="line">    [_carBuilder buildEngine];</span><br><span class="line">    [_carBuilder buildBody];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Car *)getCar</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [_carBuilder getCar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顾客</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Customer</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Customer</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)buyCar</span><br><span class="line">&#123;</span><br><span class="line">    Productor *productor  = [Productor new];</span><br><span class="line">    BenzeCarBuilder *builder = [BenzeCarBuilder new];</span><br><span class="line">    [productor setCarBuilder:builder];</span><br><span class="line">    [productor constructCar];</span><br><span class="line">    <span class="comment">// 获得了一个复杂的车</span></span><br><span class="line">    Car *car = [productor getCar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述例子对的角色分别是:</p>
<table>
<thead>
<tr>
<th>抽象建造者(Builder)</th>
<th>具体建造者(ConcreteBuilder)</th>
<th>指挥者(Product)</th>
<th>产品角色(Product)</th>
</tr>
</thead>
<tbody><tr>
<td>CarBuilder</td>
<td>VolkswagenCarBuilder&amp;BenzCarBuilder</td>
<td>Productor</td>
<td>Car</td>
</tr>
</tbody></table>
<p>对应的结构图如下:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5rvi7bqbj30i40dh74b.jpg">

<p>优点:</p>
<ul>
<li>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>
<li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象 。</li>
<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</li>
<li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>
</ul>
<p>缺点:</p>
<ul>
<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制</li>
<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>
</ul>
<p>总结:</p>
<p>结合业务场景斟酌使用</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2018/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义: 定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法独立于使用它的客户而变化，也称为政策模式(policy)。策略模式是一种对象行为型模式。</p>
<span id="more"></span>

<p>动机：有许多算法可以实现某一功能， 如排序算法实现方式有冒泡、选择、堆排序、快速排序、希尔排序等，要想实现一个排序用不同的方式， 一种常用的方法就是Hard Coding, 一个类中写若干个方法， 每一个方法对应着一种算法，再或者写一个方法，通过变量和万能的if else大发进行选择。这两种方式同属于Hard Coding（原因是当我们增加一种新的排序算法，需要修改封装算法类的源代码，更换查找算法，也需要修改客户端调用代码）， 随着将来的聪明人发明的排序算法越来越多，必将导致算法类越来越复杂， 越来越难以维护。</p>
<p>看来这个算法类是要不得的，那干脆将算法直接放在“客户端”中，这种做法显然更不可取。</p>
<p>那么动机这时候就来了，我们可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，每一个封装算法得类我们都可以称之为策略，为了保证策略的一致性， 一般会用一个抽象的策略类来做算法的定义，而具体的实现交由具体的算法类处理。</p>
<p>使用策略模式时，我们可以定义一些策略类，每一个策略类中封装一种具体的算法。在这里，每一个封装算法的类我们都可以称之为一种策略，根据传入不同的策略类，使环境类执行不同策略类中的算法。</p>
<p>类图：</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghywhf2i71j30i408h747.jpg">

<p>角色分析：</p>
<ul>
<li>Context 环境类</li>
<li>Strategy 抽象策略类或者协议</li>
<li>ConcreteStrategy 具体策略 类</li>
</ul>
<p>实例: 我们我们有两个智能语音服务,平时的状态没有那么多的并发,选用普通的服务就行,但是,活动期间,并发陡增,则需要切换到高级的服务才能满足条件,就是根据不同的场景选用不同的策略.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SmartVoiceProtocal</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)fv_startService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>具体的策略类:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NormalSVPlan</span> : <span class="title">NSObject</span>&lt;<span class="title">SmartVoiceProtocal</span>&gt; </span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)fv_startService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NormalSVPlan</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)fv_startService</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;正常状态服务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HighSVPlan</span> : <span class="title">NSObject</span>&lt;<span class="title">SmartVoiceProtocal</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)fv_startService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HighSVPlan</span> </span></span><br><span class="line">  </span><br><span class="line">- (<span class="type">void</span>)fv_startService </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;高并发正常状态服务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>环境类:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SVService</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">@proeprty (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="type">id</span>&lt;SmartVoiceProtocal&gt;plan;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SVService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startService</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.plan fv_startService];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上下文类</span></span><br><span class="line">SVService *service = [SVService alloc] init];</span><br><span class="line">service.plan = [NormalSVService alloc] init]:</span><br><span class="line">[service startService];</span><br><span class="line"><span class="comment">// 改变策略</span></span><br><span class="line">service.plan = [HighSVService alloc] init];</span><br><span class="line">[service startService];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>
<li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族，恰当使用继承可以把公共的代码移到抽象策略类中，从而避免重复的代码。</li>
<li>策略模式提供了一种算法的复用机制，由于将算法单独提取出来封装在策略类中，因此不同的环境类可以方便地复用这些策略类。</li>
<li>使用策略模式可以避免使用多重条件转移语句。</li>
</ul>
<p>缺点:</p>
<ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂模式</title>
    <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>简单工厂模式(Simple Factory Pattern), 又称静态工厂方法(Static Factory Method); 专门定义一个类来负责创建其他类的实例.可根据创建方法的参数来返回不同类的实例,被创建的实例通常都具有共同的父类.</p>
<span id="more"></span>

<p>角色：</p>
<ul>
<li>Factory：工厂角色, 负责实现创建产品的所有细节</li>
<li>Product：抽象产品角色, 负责定义外部访问产品接口</li>
<li>ConcreteProduct：具体产品角色, 负责封装具体的产品细节</li>
</ul>
<p>示例: 简单工厂模式中的工厂类,可比做为富士康,它可以加工不同品牌的手机,加工厂根据加工的类型产出相应的手机,比如苹果手机&amp;小米手机等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Phone抽象类</span><br><span class="line">@interface Phone : NSObject</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// iPhone产品类</span><br><span class="line">@interface iPhone : Phone </span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// miPhone产品类</span><br><span class="line">@interface miPhone : Phone</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p><code>富士康</code>的实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface PhoneFactory : NSObject</span><br><span class="line">- (Phone *)createPhoneWithType:(NSInteger)type</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation PhoneFactory </span><br><span class="line"></span><br><span class="line">- (Phone *)createPhoneWithType:(NSInteger)type</span><br><span class="line">&#123;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">      case 0:</span><br><span class="line">      &#123;</span><br><span class="line">          return [iPhone new]; </span><br><span class="line">      &#125;</span><br><span class="line">      case 1:</span><br><span class="line">      &#123;</span><br><span class="line">          return [miPhone new];</span><br><span class="line">      &#125;</span><br><span class="line">      default:</span><br><span class="line">          return nil;</span><br><span class="line">          break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>外界使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Phone *phone = [PhoneFactory createPhoneWithType:0];</span><br></pre></td></tr></table></figure>
<p>对应的类图如下:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh5lxahfp6j30jw0ebdft.jpg">



<p>优点:</p>
<ul>
<li>屏蔽创建细节, 减少系统耦合</li>
</ul>
<p>缺点:</p>
<ul>
<li>新添产品类型,需要修改工厂类, 不符合开闭原则.</li>
<li>产品类型繁多时,不便维护</li>
</ul>
<p>总结:<br>简单工厂模式适合产品种类比较少,并且未来增多的概率比较低的情况</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Creational Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰器模式</title>
    <url>/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>不改变原有对象的前提下,动态地给一个对象增加一些额外的功能.</p>
<span id="more"></span>

<p>成员：</p>
<ul>
<li>Component， 抽象组件</li>
<li>ConcreteComponent, 具体组件</li>
<li>Decorator, 抽象装饰器</li>
<li>ConcreteDecorator, 具体装饰器</li>
</ul>
<p>类图：</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gimp6zrv0pj30e40b9a9y.jpg">

<p>实例:<br>装饰器复合开闭原则,在不改变原有类的结构下增加类的功能.例如,HeadFirst系列里的经典案例星巴兹咖啡,定义一个Coffee的抽象类,只能提供咖啡,但通过装饰器SugarCoffee装饰之后扩展了新功能,另外你还可以加点奶之类.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 咖啡抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Coffee</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCoffeePrice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Coffee</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCoffeePrice</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.</span>f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调料装饰器抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CondimentDecorator</span> : <span class="title">Coffee</span></span></span><br><span class="line"></span><br><span class="line">@propety (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Coffee *coffee;</span><br><span class="line">- (instancetpe)initWithCoffee:(Coffee *)coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CondimentDecorator</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoffee:(Coffee *)coffee</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体的Coffee</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ACoffee</span> : <span class="title">Coffee</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCoffeePrice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> : <span class="title">ACoffee</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCoffeePrice</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;A Coffee&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体的装饰器</span></span><br><span class="line">@inteface SugerDecorator : CondimentDecorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SugerDecorator</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)getCoffeePrice</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.coffee getCoffeePrice] + <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@-Sugar&quot;</span>,[<span class="keyword">self</span>.coffee description]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Coffee *coffee = [ACoffee new];</span><br><span class="line">coffee = [[SugerDecorator alloc] initWithCoffee:coffee];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@-----%@&quot;</span>,coffee,@([coffee getCoffeePrice]));</span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>装饰器避免了修改原有功能代码,复合开闭原则</li>
<li>装饰器在运行时可以动态为对象添加功能,从而达到不同的效果</li>
</ul>
<p>缺点:</p>
<ul>
<li>需要根据每一个扩展的功能添加具体的装饰类,增加类的数量</li>
</ul>
<p>总结:</p>
<ul>
<li>对一些类业务本身比较复杂,继承关系比较多的时候,可以考虑用装饰器来扩展</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Structural Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式</title>
    <url>/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式的别名包括发布-订阅（Publish&#x2F;Subscribe）模式、模型-视图（Model&#x2F;View）模式、源-监听器（Source&#x2F;Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</p>
<span id="more"></span>

<p>实例:<br>观察者模式在iOS中体现的技术可分为,KVO&amp;NSNotificaiton, 下面通过KVO实现气象台观测天气变化的简单例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface WeatherStation : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *status;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface WeatherStation ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSMutableArray *observerList;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation WeatherStation</span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self)</span><br><span class="line">    &#123;</span><br><span class="line">        [self addObserver:self forKeyPath:@&quot;state&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    [self removeObserver:self forKeyPath:@&quot;state&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)observerValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context</span><br><span class="line">&#123;</span><br><span class="line">    NSString *state = change[@&quot;new&quot;];</span><br><span class="line">    [_observerList enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop)&#123;</span><br><span class="line">        Observer *ob = obj;</span><br><span class="line">        [ob observeWeather:state];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)registerWithObserver:(Observer *)observer</span><br><span class="line">&#123;</span><br><span class="line">    if (!_observerList) _observerList = [NSMutableArray new];</span><br><span class="line">    [_observerList addObject:observer];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 观察者</span><br><span class="line">@interface Observer : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *name;</span><br><span class="line"></span><br><span class="line">- (void)observeWeather:(NSString *)state;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Observer</span><br><span class="line"></span><br><span class="line">- (void)observeWeather:(NSString *)state</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;%@ observer weather changed: %@&quot;, _name, weather);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WeatherStation *station = [WeatherStation new];</span><br><span class="line">Observer *farmer = [Observer new];</span><br><span class="line">Observer *student = [Observer new];</span><br><span class="line">farmer.name = @&quot;farmer&quot;;</span><br><span class="line">student.name = @&quot;student&quot;;</span><br><span class="line"></span><br><span class="line">[station registerWithObserver:farmer];</span><br><span class="line">[station registerWithObserver:student];</span><br><span class="line"></span><br><span class="line">station.state = @&quot;rainy&quot;;</span><br><span class="line">station.state = @&quot;sunny&quot;;</span><br><span class="line"></span><br><span class="line">// out</span><br><span class="line">farmer observe weather changed: rainy</span><br><span class="line">student observe weather changed: rainy</span><br><span class="line">farmer observe weather changed: sunny</span><br><span class="line">student observe weather changed: sunny</span><br></pre></td></tr></table></figure>

<p>对应的类图:</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghydn4crxxj30kg09vmx4.jpg">



<p>优点:</p>
<ul>
<li>观察者模式可以实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制，并抽象了更新接口，使得可以有各种各样不同的表示层充当具体观察者角色。</li>
<li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。观察目标只需要维持一个抽象观察者的集合，无须了解其具体观察者。由于观察目标和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。</li>
<li>观察者模式支持广播通信，观察目标会向所有已注册的观察者对象发送通知，简化了一对多系统设计的难度。</li>
<li>观察者模式满足“开闭原则”的要求，增加新的具体观察者无须修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便。</li>
</ul>
<p>缺点:</p>
<ul>
<li>如果一个观察目标对象有很多直接和间接观察者，将所有的观察者都通知到会花费很多时间。</li>
<li>观察者模式不能检测状态改变的过程,只能监听状态改变的结果</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Design Patterns</tag>
        <tag>Behavioral Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-适配器</title>
    <url>/2018/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[<p>定义:有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类能在一起工作，做法是将类自己的接口包裹在一个已存在的类中。</p>
<span id="more"></span>

<p>角色</p>
<ul>
<li>Target：目标抽象类</li>
<li>Adapter：适配器类</li>
<li>Adaptee：适配者类</li>
<li>Client：客户类</li>
</ul>
<p>类图：</p>
<img src= "https://tva1.sinaimg.cn/large/007S8ZIlly1gh5xpaawulj30ha07ugli.jpg" width=80%>

<p>实例:<br>比如iPhone的手机卡是特别小的Nano卡,把Nano卡拿到的其他手机上不能贴合卡槽尺寸,所以我们需要加一个复合卡槽尺寸的卡套</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准卡 尺寸协议</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">StandardSIMSizeProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)normalSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Nano卡 尺寸协议</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NanoSIMSizeProtocal</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)nanoSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Nano 卡套（Adapter）</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NanoAdapter</span> : <span class="title">SIMCard</span> &lt;<span class="title">StandardSIMSizeProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NanoSIMCard *nanoSIMCard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NanoAdapter</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)normalSize&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一部手机</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NormalPhone</span> : <span class="title">Phone</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setSimCard:(SIMCard *)simCard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NormalPhone</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setSimCard:(SIMCard *)simCard</span><br><span class="line">&#123;</span><br><span class="line">    [simCard normalSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准卡不需要适配器</span></span><br><span class="line">StandardSIMCard *standardCard = [StandardSIMCard new];</span><br><span class="line">NormalPhone *phone = [NormalPhone new];</span><br><span class="line">[phone setSimCard:standardCard];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是由于普通的手机卡并不能直接安装Nano卡,因此需要加一个卡套</span></span><br><span class="line"><span class="comment">// Nano卡需要一个适配器</span></span><br><span class="line">NanoSIMCard *nanoCard  = [NanoSIMCard new];</span><br><span class="line">NanoAdapter *nanoAdapter = [NanoAdapter new];</span><br><span class="line">nanoAdapter.nanoSIMCard = nanoCard;</span><br><span class="line">[phone setSimCard:nanoAdapter];</span><br></pre></td></tr></table></figure>
<p>实例角色：</p>
<table>
<thead>
<tr>
<th align="center">Target：目标抽象类</th>
<th align="center">Adapter：适配器类</th>
<th align="center">Adaptee：适配者类</th>
<th align="center">Client：客户类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIMCard</td>
<td align="center">NanoAdapter</td>
<td align="center">NanoSIMCard</td>
<td align="center">NormalPhone</td>
</tr>
</tbody></table>
<p>优点:</p>
<ul>
<li>适配器不需要改变现有的类,提高类的复用性</li>
<li>目标类和适配器类解耦, 提高扩展性，完全符合“开闭原则”</li>
</ul>
<p>缺点:</p>
<ul>
<li>增加了系统的复杂性</li>
</ul>
<p>成功案例</p>
<ul>
<li>JDBC</li>
</ul>
<p>总结:</p>
<ul>
<li>在两套系统都比较复杂的情况下,可通过适配器做适配,影响较小</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Design Patterns</tag>
        <tag>Structural Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之享元模式</title>
    <url>/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>运用共享技术服用大量细粒度的对象,降低程序内存的占用,提高程序性能.</p>
<span id="more"></span>

<p>实例:<br>重要体现在对大量细粒度的对象的复用,如:音乐软件根据收费划分出免费用户和会员用户,免费用户只能听部分的免费音乐,会员则可以听全部音乐并可以下载,虽然两种用户的行为有些区别,但它们所享受的音乐来自于一个音乐库,这样保存一份就可以了,音乐库如果新添了音乐直接放到音乐库即可,然后该音乐库可以服务不同形态的用户,音乐库在这里就相当于享元池或缓存池.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 音乐服务</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MusicService</span> ()</span></span><br><span class="line"><span class="comment">// 音乐库</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *musicLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MusicService</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 听</span></span><br><span class="line">- (<span class="type">void</span>)listenToMusic:(<span class="built_in">NSString</span> *)music</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载</span></span><br><span class="line">- (<span class="type">void</span>)downloadMusic:(<span class="built_in">NSString</span> *)music</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 免费的音乐服务</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FreeMusicService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MusicService *musicServic;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)listenFreeMusic:(<span class="built_in">NSString</span> *)music;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FreeMusicService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)listenFreeMusic:(<span class="built_in">NSString</span> *)music</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([music isEqualToString:music])</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span>.musicService listenMusic:music];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;快去买会员呀&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vip 音乐服务</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">VipMusicService</span> : <span class="title">NSOjbect</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MusicService *musicServer;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)listenMusic:(<span class="built_in">NSString</span> *)music;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)downloadMusic:(<span class="built_in">NSString</span> *)music;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">VipMusicService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)listenMusic:(<span class="built_in">NSString</span> *)music</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.musicService listenMusic:music];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)downloadMusic:(<span class="built_in">NSString</span> *)music</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.musicService downloadMusic:music];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户使用</span></span><br><span class="line">MusicService *musicService = [MusicService new];</span><br><span class="line"></span><br><span class="line">FreeMusicService *freeService = [FreeMusicService new];</span><br><span class="line">VipMusicService *vipService = [VipMusicService new];</span><br><span class="line"></span><br><span class="line">freeService.musicService = musicService;</span><br><span class="line">vipService.musicService = musicService;</span><br><span class="line"></span><br><span class="line">[freeService listenFreeMusic:<span class="string">@&quot;free&quot;</span>];</span><br><span class="line">[freeService listenMusic:<span class="string">@&quot;all&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>使用享元模式可以减少内存中创建细粒度对象的个数,使得相同的对象能够得以服用,降低消耗,提升性能.</li>
<li>享元模式的外部状态相对独立,可以服务任意了不同场景下的对象</li>
</ul>
<p>缺点:</p>
<ul>
<li>使用享元需要分离内部和外部状态,增加逻辑</li>
<li>对象在缓冲池中的服用要注意线程安全的问题</li>
</ul>
<p>总结:</p>
<ul>
<li>在细粒度非常繁多的时候,享元模式不失为一种好的优化办法</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之代理</title>
    <url>/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>定义:<br>代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问.</p>
<span id="more"></span>

<p>实例:<br>通过代理对象解决直接访问目标对象给系统带来的不必要复杂性.如:在Windows上打开一个程序,有快捷方式的时候直接点击快捷方式便可以打开,如果没有快捷方式,则需要问下小李程序安装在那个盘下了?啊,D盘呀,那个目录下了? <code>xxx</code>目录呀, 麻蛋, 咋有俩, … ,在这个片段中快捷方式便是代理,提供了一个控制对这个程序的访问.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 协议</span></span><br><span class="line">@protocal Image &lt;<span class="built_in">NSObject</span>&gt;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)displayImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假装是比较复杂的系统</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RealImage</span> : <span class="title">NSObject</span> &lt;<span class="title">Image</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFileName:(<span class="built_in">NSString</span> *)fileName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RealImage</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFileName:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _fileName = fileName;</span><br><span class="line">        [<span class="keyword">self</span> loadImageFromDisk];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)loadImageFromDisk</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Loading %@&quot;</span>, _fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Image协议方法  */</span></span><br><span class="line">- (<span class="type">void</span>)displayImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Displaying %@&quot;</span>,_fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ProxyImage</span> :<span class="title">NSObject</span> &lt;<span class="title">Image</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFileName:(<span class="built_in">NSString</span> *)fileName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ProxyImage</span> </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_fileName;</span><br><span class="line">    RealImage *_image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFileName:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init])</span><br><span class="line">    &#123;</span><br><span class="line">        _fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)displayImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_image == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _image = [[RealImage alloc] initWithFileName:_fileName];</span><br><span class="line">    &#125;</span><br><span class="line">    [_image displayImage];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line">ProxyImage *pImage = [[ProxyImage alloc] initWithFileName:<span class="string">@&quot;moe_photo1&quot;</span>];</span><br><span class="line">[pImage displayImage];</span><br><span class="line"></span><br><span class="line">ProxyImage *pImage2 = [[ProxyImage alloc] initWithFileName:<span class="string">@&quot;moe_photo2&quot;</span>];</span><br><span class="line">[pImage22 displayImage];</span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>降低了用户与系统的耦合度: 代理对象能协调调用者和被调用者</li>
<li>通过代理可以对用户访问系统的过程做不同的控制</li>
<li>在某些场景下可以减少字眼的小号</li>
<li>可以通过代理控制用户对系统操作的权限</li>
</ul>
<p>缺点:</p>
<ul>
<li>在用户和系统之间增加了一层代理层,有可能引起用户的请求相应速度变慢</li>
</ul>
<p>总结:</p>
<ul>
<li>结合业务场景选用是否增加代理层</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之原型模式</title>
    <url>/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<p>定义:<br>使用原型实例指定待创建对象的类型,并且通过复制这个原型来创建新的对象.</p>
<span id="more"></span>

<p>实例:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">Person *xiaoli = [[Person alloc] init];</span><br><span class="line">xiaoli.name = <span class="string">@&quot;xiaoli&quot;</span>;</span><br><span class="line">xiaoli.age = <span class="string">@&quot;12&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制原对象</span></span><br><span class="line">Person *xiaozhao = [xiaoli <span class="keyword">copy</span>];</span><br><span class="line"><span class="comment">// 复制原对象</span></span><br><span class="line">xiaozhao.name = <span class="string">@&quot;xiaozhao&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>简化对象的创建过程, 节约系统资源,提高对象生成效率</li>
<li>可以很方便的通过改变值来生成对象</li>
</ul>
<p>缺点:</p>
<ul>
<li>需要copy方法,代码量增大</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之备忘录</title>
    <url>/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>定义:<br>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。它是一种对象行为型模式，其别名为Token。</p>
<span id="more"></span>

<p>实例:<br>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，当前很多软件都提供了撤销操作，其中就使用了备忘录模式。</p>
<p>角色状态</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayerState</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> level;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> rank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PlayerState</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>角色类</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Player</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PlayerState *state; <span class="comment">// 角色状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置角色状态</span></span><br><span class="line">- (<span class="type">void</span>)setPlayerName:(<span class="built_in">NSString</span> *)name level:(<span class="built_in">NSUInteger</span>)level rank:(<span class="built_in">NSUInteger</span>)rank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Player</span></span></span><br><span class="line">- (<span class="type">void</span>)setPlayerName:(<span class="built_in">NSString</span> *)name level:(<span class="built_in">NSUInteger</span>)level rank:(<span class="built_in">NSUInteger</span>)rank &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_state) _state = [PlayerState new];</span><br><span class="line">    _state.name = name;</span><br><span class="line">    _state.level = level;</span><br><span class="line">    _state.rank = rank;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>备忘录</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Memorandum</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储</span></span><br><span class="line">- (<span class="type">void</span>)storeWithPlayer:(Player *)player;</span><br><span class="line"><span class="comment">// 恢复</span></span><br><span class="line">- (<span class="type">void</span>)restoreWithPlayer:(Player *)player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Memorandum</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PlayerState *state; <span class="comment">// 备忘录存储的角色状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Memorandum</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)storeWithPlayer:(Player *)player &#123;</span><br><span class="line">    _state = player.state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)restoreWithPlayer:(Player *)player &#123;</span><br><span class="line">    <span class="keyword">if</span>(_state) player.state = _state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建角色 A</span></span><br><span class="line">Player *playA = [Player new];</span><br><span class="line">[playA setPlayerName:<span class="string">@&quot;King&quot;</span> level:<span class="number">99</span> rank:<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建备忘录并保存角色 A 的状态</span></span><br><span class="line">Memorandum *memorandum = [Memorandum new];</span><br><span class="line">[memorandum storeWithPlayer:playA];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建角色 B 并使用备忘录恢复状态</span></span><br><span class="line">Player *playB = [Player new];</span><br><span class="line">[memorandum restoreWithPlayer:playB];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;name:%@ level:%ld rank:%ld&quot;</span>, playB.state.name, playB.state.level, playB.state.rank);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>它提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原。</li>
<li>备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。</li>
</ul>
<p>缺点:</p>
<ul>
<li>资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之外观模式</title>
    <url>/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82/</url>
    <content><![CDATA[<p>定义:<br>外观模式定义了一个高层的接口, 为子系统的一组接口提供了一个统一的接口.</p>
<span id="more"></span>

<p>实例:<br>外观模式提供了简单明确的接口,该实现对众多子系统的功能进行整合,例如:图片缓存,内部高寒了涉及到其他子系统的处理,如:缓存&#x2F;下载等处理,在获取一张图片资源的时候只需要调用getImageWithUrl:(NSString *)url 接口就可以了,达到了与下载和缓存的解耦</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WebImage</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)getImageWithUrl:(<span class="built_in">NSString</span> *)url</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">id</span> cacheImage = [ImageWebCaches getImageFromCacheWithUrl:url];</span><br><span class="line">    <span class="keyword">if</span> (cacheImage)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">id</span> downloadImage = [ImageWebDownloader downloadImageWithUrl:url];</span><br><span class="line">    <span class="keyword">if</span> (downloadImage)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 缓存图片</span></span><br><span class="line">        [ImageWebCaches cacheImage:downloadImage url:url];</span><br><span class="line">        <span class="keyword">return</span> downloadImage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 再用组合的方式进行处理如:UIImageView + WebCache</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImageView</span> + <span class="title">WebCache</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)sd_setImageWithUrl:(<span class="built_in">NSString</span> *)urlString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [WebImage getImageWithUrl:urlString];</span><br><span class="line">    <span class="keyword">if</span> (image)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外部使用</span></span><br><span class="line"><span class="built_in">UIImageView</span> *imageView = [<span class="built_in">UIImageView</span> new];</span><br><span class="line">[imageView sd_setImageWithUrl:url];</span><br></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>实现了用户(上文中的UIImageView)和各个子系统之间的解,客户端也无需知晓各个子系统的接口,简化了用户的调用过程,使得系统使用起来更加便捷</li>
<li>符合最少知道原则,用户无需知道子系统内部究竟干了啥</li>
</ul>
<p>缺点:</p>
<ul>
<li>增加新的子系统需要更改原有代码,甚至有可能需要更改用户的代码</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之桥接模式</title>
    <url>/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>将抽象部分与它的实现部分分离,使他们都可以独立变化.</p>
<span id="more"></span>

<p>实例:<br>手机都有各自的不同之处,但是他们都有一个手机卡槽,卡可以选择不同的运营商.不管手机和卡内部如何变化,只要卡槽的行业额标准不变, 就都可以正常的使用.桥接模式在于将复杂类进行分割,优先对象组合的方式.手机里的手机卡抽去新建一类,手机持有手机卡实例的组合.而不是通过集成来新建多个不同手机卡的手机子类.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建手机SIM卡协议</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">SIMCardProtocal</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取手机卡信息接口</span></span><br><span class="line">- (<span class="type">void</span>)getSIMInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SIMCard抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SIMCard</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)getSIMInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SIMCard</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)getSIMInfo&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 联通SIM卡</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UnicomSIMCard</span> : <span class="title">SIMCard</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">@imiplementation UnicomSIMCard</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)getSIMInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎使用联通卡&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动SIMCard</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MobileSIMCard</span> : <span class="title">SIMCard</span>&lt;<span class="title">SIMCardProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MobileSIMCard</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)getSIMInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;欢迎使用移动&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Phone</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) SIMCard *simCard;</span><br><span class="line"><span class="comment">// 启动手机</span></span><br><span class="line">- (<span class="type">void</span>)launchPhone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Phone</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)launchPhone</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.simCard)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span>.simCard getSIMInfo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机子类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">iPhone</span> : <span class="title">Phone</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">miPhone</span> : <span class="title">Phone</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">UnicomSIMCard *unicomSim  = [UnicomSimCard new];</span><br><span class="line">MobileSIMCard *mobileSim = [MobileSIMCard new];</span><br><span class="line"></span><br><span class="line">miPhone *mi = [miPhone new];</span><br><span class="line">[mi setSimCard:unicomCard];</span><br><span class="line"></span><br><span class="line">iPhone *iphone = [iPhone new];</span><br><span class="line">[iphone setSimCard:mobileSim];</span><br><span class="line"></span><br><span class="line">[mi launchPhone];</span><br><span class="line">[iphone launchPhone];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>扩展性好,复合开闭原则</li>
</ul>
<p>缺点:</p>
<ul>
<li>需要识别两个独立变化的维度</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之模板方法</title>
    <url>/2018/04/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>定义:<br>定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<span id="more"></span>

<p>实例:<br>模板方法模式有三类:</p>
<ul>
<li>抽象方法: 一个抽象方法由抽象类生命,由具体子类实现</li>
<li>具体方法: 一个具体方法有一个抽象类或者具体类声明并实现,其子类可重写和继承</li>
<li>钩子方法: 一个钩子方法由一个抽象类或者具体类声明并实现,其子类可能会加以扩展. 通常在父类中给出的实现是一个空实现，并以该空实现作为方法的默认实现，当然钩子方法也可以提供一个非空的默认实现。通过在子类中实现的钩子方法对父类方法的执行进行约束，实现子类对父类行为的反向控制。<br>在给定一个有固定模板的烹饪教程的情况下，根据不同烹饪需求对教程中的内容进行动态调整。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装烹饪步骤算法</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CookTutorial</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 烹饪食物 - 具体方法</span></span><br><span class="line">- (<span class="type">void</span>)cook;</span><br><span class="line"><span class="comment">// 准备食材 - 抽象方法</span></span><br><span class="line">- (<span class="type">void</span>)prepareIngredients;</span><br><span class="line"><span class="comment">// 加食用油 具体方法</span></span><br><span class="line">- (<span class="type">void</span>)addFat;</span><br><span class="line"><span class="comment">// 加入食材 - 抽象方法</span></span><br><span class="line">- (<span class="type">void</span>)addIngredients;</span><br><span class="line"><span class="comment">// 加入调味品 - 具体方法</span></span><br><span class="line">- (<span class="type">void</span>)addFlavouring;</span><br><span class="line"><span class="comment">// 是否为健康食物 - 钩子方法</span></span><br><span class="line">- (<span class="type">BOOL</span>)isHealthyFood;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CookTutorial</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)cook</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> prepareIngredients];</span><br><span class="line">    <span class="comment">// 如果是健康食物不加食用油</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> isHealthyFood])</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span> addFat];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> addIngredients];</span><br><span class="line">    [<span class="keyword">self</span> addFlavouring];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line">- (<span class="type">void</span>)prepareIngredients &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法</span></span><br><span class="line">- (<span class="type">void</span>)addFat</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2. 加调和油&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line">- (<span class="type">void</span>)addIngredients &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法</span></span><br><span class="line">- (<span class="type">void</span>)addFlavouring </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;4. 加盐&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  钩子方法</span></span><br><span class="line">- (<span class="type">BOOL</span>)isHealthyFood</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体的烹饪类: 这里烹饪鱼</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CookFish</span> : <span class="title">CookTutorial</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CookFish</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备食材</span></span><br><span class="line">- (<span class="type">void</span>)prepareIngredients </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1. 准备好生鳕鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入食材</span></span><br><span class="line">- (<span class="type">void</span>)addIngredients </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;3. 生鳕鱼入锅&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入调味品</span></span><br><span class="line">- (<span class="type">void</span>)addFlavouring </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="variable language_">super</span> addFlavouring];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;4. 加黑胡椒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为健康食物（不放油）</span></span><br><span class="line">- (<span class="type">BOOL</span>)isHealthyFood </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">CookFish * cookFish = [CookFish new];</span><br><span class="line">[cookFish cook]; </span><br></pre></td></tr></table></figure>
<p>优点:</p>
<ul>
<li>在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。</li>
<li>模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，它鼓励我们恰当使用继承来实现代码复用。</li>
<li>可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。</li>
<li>在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则。</li>
</ul>
<p>缺点:</p>
<ul>
<li>需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之访问者模式</title>
    <url>/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义:<br>提供一个作用于某对象结构中的各元素的操作表示，它使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。访问者模式是一种对象行为型模式。访问者模式是一种较为复杂的行为型设计模式，它包含访问者和被访问元素两个主要组成部分，这些被访问的元素通常具有不同的类型，且不同的访问者可以对它们进行不同的访问操作。访问者模式使得用户可以在不修改现有系统的情况下扩展系统的功能，为这些不同类型的元素增加新的操作。</p>
<span id="more"></span>

<p>实例:<br>在使用访问者模式时，被访问元素通常不是单独存在的，它们存储在一个集合中，这个集合被称为「对象结构」，访问者通过遍历对象结构实现对其中存储的元素的逐个操作。通过一个简单的例子了解访问者模式，访问者有财务部门<code>FADepartment</code>和 HR 部门<code>HRDepartment</code>，通过访问雇员<code>Employee</code>来查看雇员的工作情况。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 部门抽象类 - 访问者抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Department</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 访问抽象方法 用来声明方法</span></span><br><span class="line">- (<span class="type">void</span>)visitEmployee:(Employee *)employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Department</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)visitEmployee:(Employee *)employee &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 财务部门 - 具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FADepartment</span> : <span class="title">Department</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FADepartment</span></span></span><br><span class="line"><span class="comment">// 访问具体方法</span></span><br><span class="line">- (<span class="type">void</span>)visitEmployee:(Employee *)employee &#123;</span><br><span class="line">    <span class="keyword">if</span> (employee.workTime &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ 工作时间满 40 小时&quot;</span>, employee.name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ 工作时间不满 40 小时，要警告！&quot;</span>, employee.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HR 部门 - 具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HRDepartment</span> : <span class="title">Department</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HRDepartment</span></span></span><br><span class="line"><span class="comment">// 访问具体方法</span></span><br><span class="line">- (<span class="type">void</span>)visitEmployee:(Employee *)employee &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> weekSalary = employee.workTime * employee.salary;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ 本周获取薪资：%ld&quot;</span>,employee.name , weekSalary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象雇员类 - 被访问者抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">// 工作时间</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> workTime;</span><br><span class="line"><span class="comment">// 时薪</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> salary;</span><br><span class="line"><span class="comment">// 接受访问抽象方法</span></span><br><span class="line">- (<span class="type">void</span>)accept:(Department *)department;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Employee</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)accept:(Department *)department &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 雇员具体类 - 被访问者具体类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FulltimeEmployee</span> : <span class="title">Employee</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FulltimeEmployee</span></span></span><br><span class="line"><span class="comment">// 接受访问具体方法</span></span><br><span class="line">- (<span class="type">void</span>)accept:(Department *)department &#123;</span><br><span class="line">    [department visitEmployee:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建财务和 HR - 访问者</span></span><br><span class="line">FADepartment *fa = [FADepartment new];</span><br><span class="line">HRDepartment *hr = [HRDepartment new];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建雇员 - 被访问者</span></span><br><span class="line">FulltimeEmployee *tim = [FulltimeEmployee new];</span><br><span class="line">tim.name = <span class="string">@&quot;tim&quot;</span>;</span><br><span class="line">tim.workTime = <span class="number">55</span>;</span><br><span class="line">tim.salary = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">FulltimeEmployee *bill = [FulltimeEmployee new];</span><br><span class="line">bill.name = <span class="string">@&quot;bill&quot;</span>;</span><br><span class="line">bill.workTime = <span class="number">38</span>;</span><br><span class="line">bill.salary = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般被访问者都存储在数据集合中方便遍历，集合中可以存储不同类型的被访问者</span></span><br><span class="line"><span class="built_in">NSArray</span> *employeeList = @[tim, bill];</span><br><span class="line">[employeeList enumerateObjectsUsingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    Employee *employee = obj;</span><br><span class="line">    <span class="comment">// 接受财务访问</span></span><br><span class="line">    [employee accept:fa];</span><br><span class="line">    <span class="comment">// 接受 HR 访问</span></span><br><span class="line">    [employee accept:hr];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">tim 工作时间满 <span class="number">40</span> 小时</span><br><span class="line">tim 本周获取薪资：<span class="number">5500</span></span><br><span class="line">bill 工作时间不满 <span class="number">40</span> 小时，要警告！</span><br><span class="line">bill 本周获取薪资：<span class="number">5700</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>增加新的访问操作很方便。使用访问者模式，增加新的访问操作就意味着增加一个新的具体访问者类，实现简单，无须修改源代码，符合“开闭原则”。</li>
<li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散在一个个的元素类中。类的职责更加清晰，有利于对象结构中元素对象的复用，相同的对象结构可以供多个不同的访问者访问。</li>
<li>让用户能够在不修改现有元素类层次结构的情况下，定义作用于该层次结构的操作。</li>
</ul>
<p>缺点:</p>
<ul>
<li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”的要求。</li>
<li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访问者访问。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之责任链</title>
    <url>/2018/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE/</url>
    <content><![CDATA[<p>定义:<br>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<span id="more"></span>

<p>实例:<br>假定我们开发一款游戏,里面每个人物都是可以通过做任务专区点数来升级防御道具.防御道具可以使盾牌或者盔甲.每种形式的防御只能应付一种特定的攻击.如果防御道具不认识一种攻击,他就把进攻的作用传递给下一个会响应的实体.比如，盔甲1不知道如何对付对手的攻击，所以把它传给下一个盔甲，盔甲2。盔甲2刚好知道如何对付这次攻击，化解了人物可能受到的损伤。由于某种原因，如果没有盔甲可以对这次攻击做出响应，攻击的作用最终会传到人物。人物对攻击做出响应时，会表现为一定程度的损伤。<br>这种只让每个独立的防御道具对特定类型的攻击做出相应的机制，简化了人物使用各种防御道具的复杂性。每种盔甲各自负责非常特定的功能。这就是责任链模式的作用所在。<br>下面我们将使用责任链模式实现这个设计，假设有两种防御：水盔甲和火盔甲。它们都只能按照设计对付某些攻击。水盔甲可以防御来自水的攻击，火盔甲可以防御来自火的攻击。人物也是响应链的一部分，因此它也应该跟其他防御道具具有共同的行为，对攻击做出响应。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AttackHandler</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AttackHandler *nextAttackHandler;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttack:(Attack *)attack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AttackHandler</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttack:(Attack *)attack</span><br><span class="line">&#123;</span><br><span class="line">    [_nextAttackHandler handleAttack:attack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WaterAttackHandler</span>: <span class="title">AttackHandler</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WaterAttackHanlder</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([attack iskindOfClass:[WaterAttack <span class="keyword">class</span>]])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;挡下了水的攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;我处理不了%@的攻击&quot;</span>,[attack <span class="keyword">class</span>])</span><br><span class="line">        [<span class="variable language_">super</span> handlerAttack:attack];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FireAttackHandler</span>: <span class="title">AttackHandler</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FireAttackHanlder</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([attack iskindOfClass:[FireAttack <span class="keyword">class</span>]])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;挡下了火的攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;我处理不了%@的攻击&quot;</span>,[attack <span class="keyword">class</span>])</span><br><span class="line">        [<span class="variable language_">super</span> handlerAttack:attack];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Avatar</span>:  <span class="title">AttackHandler</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Avatar</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)handleAttak:(Attack *)attack</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;我处理不了%@的攻击&quot;</span>,[attack <span class="keyword">class</span>])</span><br><span class="line">    [<span class="variable language_">super</span> handlerAttack:attack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个人物</span></span><br><span class="line">AttackHandler *avatar = [Avatar alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 穿上防水铠甲</span></span><br><span class="line">AttackHandler *waterAramesdAvatar = [WaterAttackHandler alloc] init];</span><br><span class="line">[waterArameAvatar setNextAttackHandler:avatar];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 穿上防火铠甲</span></span><br><span class="line">AttackHnalder *fireAramesdAvatar = [FireAttackHandler alloc] init];</span><br><span class="line">[fireAramesAvatar setNextAttackHandler:waterArameAvatar];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用用水攻击游戏人物</span></span><br><span class="line">Attack *waterAttack = [[WaterAttack alloc] init];</span><br><span class="line">[fireAramedAvatar handleAttack:waterAttack];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用火攻击游戏人物</span></span><br><span class="line">Attack *fireAttack = [[FireAttack alloc] init];</span><br><span class="line">[fireAramedAvatar handleAttack:fireAttack];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用土攻击游戏人物</span></span><br><span class="line">Attack *soliderAttack = [[SoliderAttack alloc] init];</span><br><span class="line">[fireAramedAvatar handleAttack:soliderAttack];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度.</li>
<li>请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。</li>
<li>在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。</li>
<li>在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合“开闭原则”的。</li>
</ul>
<p>缺点:</p>
<ul>
<li>由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。</li>
<li>对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。</li>
<li>如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</li>
</ul>
<p>总结:</p>
<ul>
<li>对于系统构成比较复杂,有多个对象可以处理请求，而处理程序只有在运行时才能确定时使用责任链。</li>
<li>向一组对象发出请求，而不想显示指定处理请求的特定处理程序时使用</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之迭代器</title>
    <url>/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<p>定义:<br>可以让用户透过特定的接口巡访容器中的每一个元素而不用了解底层的实现</p>
<span id="more"></span>

<p>实例:<br>迭代器帮助请求方获取数据,避免直接访问数据聚合类,从而使数据聚合类专注于存储数据,具体应用有分页等动能, 分页功能的迭代器将专门负责操作分页数据,将操作逻辑和数据源分离.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据列表</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">List</span> : <span class="title">NSOjbect</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">List</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 原始数据</span></span><br><span class="line">        _list = @[<span class="string">@&quot;0&quot;</span>,<span class="string">@&quot;1&quot;</span>,<span class="string">@&quot;2&quot;</span>,<span class="string">@&quot;3&quot;</span>,<span class="string">@&quot;4&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="comment">// .h file</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Iterator</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> index;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)previous;</span><br><span class="line">- (<span class="built_in">NSString</span> *)next;</span><br><span class="line">- (<span class="type">BOOL</span>)isFirst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="comment">// .m file</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Iterator</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器持有数据源</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) List *list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Iterator</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _list = [List new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)previous</span><br><span class="line">&#123;</span><br><span class="line">    _index = MAX(<span class="number">0</span>, _index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> [_list.list objectAtIndex:_index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)next</span><br><span class="line">&#123;</span><br><span class="line">    _index = MIN(_list.list.count <span class="number">-1</span>, _index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> [_list.list objectAtIndex:_index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)isFirst</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _index == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line">Iterator *iterator = [Iterator new];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[iterator next]); </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[iterator next]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[iterator next]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[iterator next]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,[iterator previous]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点:</p>
<ul>
<li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li>
<li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li>
<li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求。</li>
</ul>
<p>缺点:</p>
<ul>
<li>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li>
<li>抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展，例如JDK内置迭代器Iterator就无法实现逆向遍历，如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。在自定义迭代器时，创建一个考虑全面的抽象迭代器并不是件很容易的事情。</li>
</ul>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/about/index.html</url>
    <content><![CDATA[
润色中...]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
